@*  
- @page "/productos-entregables"
- Autor: Victor Oliveros
- Fecha: 10/2025
- Version: 1.0
- Descripción: Página para gestionar asociaciones entre productos y entregables con responsables.
- Notas: Permite crear entregables y asociar productos y responsables simultáneamente

Documentación: Gestión integral de entregables con sus productos asociados y responsables asignados.
*@

@page "/productos-entregables"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.Linq

@inject IHttpClientFactory fabricaHttp
@inject NavigationManager navegacion
@rendermode InteractiveServer

<PageTitle>Gestión de Productos y Entregables</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-diagram-3 me-2"></i>
            Gestión de Productos y Entregables
        </h5>

        <div class="mb-3 d-flex gap-2 items-center">
            <button type="button" class="btn btn-outline-primary" @onclick="CargarAsociaciones">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todas
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="CargarDatosIniciales">
                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Cargar Datos
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        <h4>Crear Entregable con Productos y Responsable</h4>
        <EditForm Model="@entregableActual" OnValidSubmit="CrearEntregableCompleto" FormName="EntregableProductoForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-file-earmark-text me-2"></i>Información del Entregable</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Código *</label>
                            <InputText class="form-control" @bind-Value="entregableActual.Codigo" />
                        </div>

                        <div class="col-md-4">
                            <label class="form-label">Título *</label>
                            <InputText class="form-control" @bind-Value="entregableActual.Titulo" />
                        </div>

                        <div class="col-md-5">
                            <label class="form-label">Descripción</label>
                            <InputText class="form-control" @bind-Value="entregableActual.Descripcion" />
                        </div>
                    </div>

                    <div class="row g-3 mt-2">
                        <div class="col-md-3">
                            <label class="form-label">Fecha Inicio</label>
                            <InputDate class="form-control" @bind-Value="entregableActual.FechaInicio" />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Fecha Fin Prevista</label>
                            <InputDate class="form-control" @bind-Value="entregableActual.FechaFinPrevista" />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Fecha Modificación</label>
                            <InputDate class="form-control" @bind-Value="entregableActual.FechaModificacion" />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Fecha Finalización</label>
                            <InputDate class="form-control" @bind-Value="entregableActual.FechaFinalizacion" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-box me-2"></i>Productos Asociados</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-3">
                        <div class="col-md-8">
                            <label class="form-label">Seleccionar Producto</label>
                            <InputSelect class="form-select" @bind-Value="productoSeleccionadoId">
                                <option value="0">-- Seleccione un producto --</option>
                                @foreach (var producto in listaProductos)
                                {
                                    <option value="@producto.Id">@producto.Titulo (@producto.Codigo)</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button type="button" class="btn btn-success" @onclick="AgregarProducto">
                                <i class="bi bi-plus-circle me-1"></i>Agregar Producto
                            </button>
                        </div>
                    </div>

                    @if (productosSeleccionados.Any())
                    {
                        <h6>Productos Seleccionados:</h6>
                        <div class="row">
                            @foreach (var producto in productosSeleccionados)
                            {
                                <div class="col-md-6 mb-2">
                                    <div class="card border-success">
                                        <div class="card-body py-2">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@producto.Titulo</strong><br />
                                                    <small class="text-muted">@producto.Codigo</small>
                                                </div>
                                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => RemoverProducto(producto.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0"><i class="bi bi-person-badge me-2"></i>Responsable del Entregable</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Responsable *</label>
                            <InputSelect class="form-select" @bind-Value="responsableSeleccionadoId">
                                <option value="0">-- Seleccione un responsable --</option>
                                @foreach (var responsable in listaResponsables)
                                {
                                    <option value="@responsable.Id">
                                        @responsable.Nombre (@ObtenerTipoResponsable(responsable.IdTipoResponsable))
                                    </option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Fecha Asignación</label>
                            <InputDate class="form-control" @bind-Value="fechaAsignacionResponsable" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary btn-lg">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> Crear Entregable Completo
                </button>
                <button type="button" class="btn btn-secondary" @onclick="LimpiarFormulario">
                    <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Reiniciar Formulario
                </button>
            </div>
        </EditForm>

        <hr />

        <!-- Sección de gestión de asociaciones existentes -->
        <div class="card">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0"><i class="bi bi-list-ul me-2"></i>Gestión de Asociaciones Existentes</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@asociacionActual" OnValidSubmit="GestionarAsociacion" FormName="AsociacionForm">
                    <div class="row g-3 align-items-end">
                        <div class="col-md-3">
                            <label class="form-label">Entregable</label>
                            <InputSelect class="form-select" @bind-Value="asociacionActual.IdEntregable">
                                <option value="0">-- Seleccione entregable --</option>
                                @foreach (var entregable in listaEntregables)
                                {
                                    <option value="@entregable.Id">@entregable.Titulo</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Producto</label>
                            <InputSelect class="form-select" @bind-Value="asociacionActual.IdProducto">
                                <option value="0">-- Seleccione producto --</option>
                                @foreach (var producto in listaProductos)
                                {
                                    <option value="@producto.Id">@producto.Titulo</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Fecha Asociación</label>
                            <InputDate class="form-control" @bind-Value="asociacionActual.FechaAsociacion" />
                        </div>
                        <div class="col-md-3">
                            <button type="submit" class="btn btn-info w-100">
                                <i class="bi bi-link" aria-hidden="true"></i> Crear Asociación
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>

        <hr />

        @if (cargando)
        {
            <p>Cargando asociaciones...</p>
        }
        else if (listaAsociaciones.Count == 0)
        {
            <p>No hay asociaciones de productos y entregables disponibles.</p>
        }
        else
        {
            <h4 class="mt-4">Asociaciones Existentes</h4>
            <div class="table-responsive">
                <table class="table table-striped table-blue">
                    <thead>
                        <tr>
                            <th>Entregable</th>
                            <th>Producto</th>
                            <th>Fecha Asociación</th>
                            <th>Responsable</th>
                            <th>Tipo Responsable</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var asociacion in listaAsociaciones.OrderBy(a => a.IdEntregable))
                        {
                            <tr>
                                <td>
                                    @{
                                        var entregableRelacionado = listaEntregables
                                        .FirstOrDefault(e => e.Id == asociacion.IdEntregable);
                                    }
                                    @if (entregableRelacionado != null)
                                    {
                                        <span><strong>@entregableRelacionado.Titulo</strong></span><br />
                                        <small class="text-muted">@entregableRelacionado.Codigo</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Entregable ID: @asociacion.IdEntregable</span>
                                    }
                                </td>
                                <td>
                                    @{
                                        var productoRelacionado = listaProductos
                                        .FirstOrDefault(p => p.Id == asociacion.IdProducto);
                                    }
                                    @if (productoRelacionado != null)
                                    {
                                        <span><strong>@productoRelacionado.Titulo</strong></span><br />
                                        <small class="text-muted">@productoRelacionado.Codigo</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Producto ID: @asociacion.IdProducto</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-info">
                                        @(asociacion.FechaAsociacion?.ToString("dd/MM/yyyy") ?? "Sin fecha")
                                    </span>
                                </td>
                                <td>
                                    @{
                                        var responsableAsociado = listaResponsablesEntregables
                                        .FirstOrDefault(re => re.IdEntregable == asociacion.IdEntregable);
                                        var responsable = responsableAsociado != null ? 
                                        listaResponsables.FirstOrDefault(r => r.Id == responsableAsociado.IdResponsable) : null;
                                    }
                                    @if (responsable != null)
                                    {
                                        <span class="text-success">@responsable.Nombre</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin responsable</span>
                                    }
                                </td>
                                <td>
                                    @if (responsable != null)
                                    {
                                        <span class="badge bg-secondary">@ObtenerTipoResponsable(responsable.IdTipoResponsable)</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-danger" 
                                            @onclick="() => EliminarAsociacion(asociacion.IdProducto, asociacion.IdEntregable)">
                                        <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    // Listas de datos
    private List<Producto_Entregable> listaAsociaciones = new();
    private List<Responsable_Entregable> listaResponsablesEntregables = new();
    private List<Entregable> listaEntregables = new();
    private List<Producto> listaProductos = new();
    private List<Responsable> listaResponsables = new();
    private List<TipoResponsable> listaTiposResponsable = new();

    // Objetos del formulario
    [SupplyParameterFromForm]
    private Entregable entregableActual { get; set; } = new();

    [SupplyParameterFromForm]
    private Producto_Entregable asociacionActual { get; set; } = new();

    // Variables de estado
    private bool cargando = false;
    private string mensaje = "";
    private string claseAviso = "alert alert-info";

    // Variables para formulario de creación completa
    private int productoSeleccionadoId = 0;
    private int responsableSeleccionadoId = 0;
    private DateTime? fechaAsignacionResponsable = DateTime.Today;
    private List<Producto> productosSeleccionados = new();

    // URLs de las APIs
    private const string urlBaseApiEntregables = "api/entregable";
    private const string urlBaseApiProductos = "api/producto";
    private const string urlBaseApiResponsables = "api/responsable";
    private const string urlBaseApiTiposResponsable = "api/tiporesponsable";
    private const string urlBaseApiProductoEntregable = "api/productoentregable";
    private const string urlBaseApiResponsableEntregable = "api/responsableentregable";

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
        await CargarAsociaciones();
        LimpiarMensajes();
    }

    private async Task CargarDatosIniciales()
    {
        await CargarEntregables();
        await CargarProductos();
        await CargarResponsables();
        await CargarTiposResponsable();
        await CargarResponsablesEntregables();
        LimpiarMensajes();
    }

    private async Task CargarAsociaciones()
    {
        LimpiarMensajes();
        try
        {
            cargando = true;
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Producto_Entregable>>>(urlBaseApiProductoEntregable);

            listaAsociaciones = respuesta?.Datos ?? new List<Producto_Entregable>();
            mensaje = $"Se cargaron {listaAsociaciones.Count} asociaciones.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar asociaciones: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarEntregables()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Entregable>>>(urlBaseApiEntregables);
            listaEntregables = respuesta?.Datos ?? new List<Entregable>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar entregables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Producto>>>(urlBaseApiProductos);
            listaProductos = respuesta?.Datos ?? new List<Producto>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar productos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task CargarResponsables()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Responsable>>>(urlBaseApiResponsables);
            listaResponsables = respuesta?.Datos ?? new List<Responsable>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar responsables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task CargarTiposResponsable()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<TipoResponsable>>>(urlBaseApiTiposResponsable);
            listaTiposResponsable = respuesta?.Datos ?? new List<TipoResponsable>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar tipos de responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task CargarResponsablesEntregables()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Responsable_Entregable>>>(urlBaseApiResponsableEntregable);
            listaResponsablesEntregables = respuesta?.Datos ?? new List<Responsable_Entregable>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar responsables de entregables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void AgregarProducto()
    {
        if (productoSeleccionadoId <= 0)
        {
            mensaje = "Debe seleccionar un producto.";
            claseAviso = "alert alert-warning";
            return;
        }

        var producto = listaProductos.FirstOrDefault(p => p.Id == productoSeleccionadoId);
        if (producto != null && !productosSeleccionados.Any(p => p.Id == producto.Id))
        {
            productosSeleccionados.Add(producto);
            productoSeleccionadoId = 0;
            mensaje = $"Producto '{producto.Titulo}' agregado.";
            claseAviso = "alert alert-success";
        }
        else if (productosSeleccionados.Any(p => p.Id == producto?.Id))
        {
            mensaje = "El producto ya está en la lista.";
            claseAviso = "alert alert-warning";
        }
    }

    private void RemoverProducto(int idProducto)
    {
        var producto = productosSeleccionados.FirstOrDefault(p => p.Id == idProducto);
        if (producto != null)
        {
            productosSeleccionados.Remove(producto);
            mensaje = $"Producto '{producto.Titulo}' removido.";
            claseAviso = "alert alert-info";
        }
    }

    private async Task CrearEntregableCompleto()
    {
        LimpiarMensajes();

        // Validaciones
        if (string.IsNullOrWhiteSpace(entregableActual.Codigo) || string.IsNullOrWhiteSpace(entregableActual.Titulo))
        {
            mensaje = "Código y título del entregable son obligatorios.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (!productosSeleccionados.Any())
        {
            mensaje = "Debe seleccionar al menos un producto.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (responsableSeleccionadoId <= 0)
        {
            mensaje = "Debe seleccionar un responsable.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            // 1. Crear el entregable
            var entregableParaCrear = new
            {
                Codigo = entregableActual.Codigo,
                Titulo = entregableActual.Titulo,
                Descripcion = entregableActual.Descripcion,
                FechaInicio = entregableActual.FechaInicio,
                FechaFinPrevista = entregableActual.FechaFinPrevista,
                FechaModificacion = entregableActual.FechaModificacion,
                FechaFinalizacion = entregableActual.FechaFinalizacion
            };

            var respuestaEntregable = await httpClient.PostAsJsonAsync(urlBaseApiEntregables, entregableParaCrear);

            if (!respuestaEntregable.IsSuccessStatusCode)
            {
                mensaje = "Error al crear el entregable.";
                claseAviso = "alert alert-danger";
                return;
            }

            var entregableCreado = await respuestaEntregable.Content.ReadFromJsonAsync<Entregable>();
            if (entregableCreado == null)
            {
                mensaje = "Error al obtener el entregable creado.";
                claseAviso = "alert alert-danger";
                return;
            }

            // 2. Asociar productos
            foreach (var producto in productosSeleccionados)
            {
                var asociacion = new
                {
                    IdProducto = producto.Id,
                    IdEntregable = entregableCreado.Id,
                    FechaAsociacion = DateTime.Today
                };

                await httpClient.PostAsJsonAsync(urlBaseApiProductoEntregable, asociacion);
            }

            // 3. Asignar responsable
            var responsableAsignacion = new
            {
                IdResponsable = responsableSeleccionadoId,
                IdEntregable = entregableCreado.Id,
                FechaAsociacion = fechaAsignacionResponsable
            };

            await httpClient.PostAsJsonAsync(urlBaseApiResponsableEntregable, responsableAsignacion);

            mensaje = $"Entregable '{entregableCreado.Titulo}' creado con {productosSeleccionados.Count} productos y responsable asignado.";
            claseAviso = "alert alert-success";

            // Recargar datos y limpiar formulario
            await CargarDatosIniciales();
            await CargarAsociaciones();
            LimpiarFormulario();
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear entregable completo: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GestionarAsociacion()
    {
        LimpiarMensajes();

        if (asociacionActual.IdEntregable <= 0 || asociacionActual.IdProducto <= 0)
        {
            mensaje = "Debe seleccionar un entregable y un producto.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            var asociacion = new
            {
                IdProducto = asociacionActual.IdProducto,
                IdEntregable = asociacionActual.IdEntregable,
                FechaAsociacion = asociacionActual.FechaAsociacion ?? DateTime.Today
            };

            var respuesta = await httpClient.PostAsJsonAsync(urlBaseApiProductoEntregable, asociacion);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Asociación creada correctamente.";
                claseAviso = "alert alert-success";
                await CargarAsociaciones();
                asociacionActual = new Producto_Entregable();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear asociación: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear asociación: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarAsociacion(int idProducto, int idEntregable)
    {
        LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiProductoEntregable}/producto/{idProducto}/entregable/{idEntregable}";
            var respuesta = await httpClient.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Asociación eliminada correctamente.";
                claseAviso = "alert alert-success";
                await CargarAsociaciones();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al eliminar asociación: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar asociación: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private string ObtenerTipoResponsable(int idTipo)
    {
        var tipo = listaTiposResponsable.FirstOrDefault(t => t.Id == idTipo);
        return tipo?.Titulo ?? $"Tipo ID: {idTipo}";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    private void LimpiarFormulario()
    {
        entregableActual = new Entregable();
        asociacionActual = new Producto_Entregable();
        productosSeleccionados.Clear();
        productoSeleccionadoId = 0;
        responsableSeleccionadoId = 0;
        fechaAsignacionResponsable = DateTime.Today;
        LimpiarMensajes();
    }
}
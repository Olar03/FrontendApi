@*  
- @page "/ejecucion-presupuestos"
- Autor: Victor Oliveros
- Fecha: 10/2025
- Version: 1.0
- Descripción: Página para gestionar la ejecución anual de presupuestos.
- Notas: Basada en la estructura de Responsables.razor

Documentación: Permite gestionar la ejecución presupuestaria por año con montos planeados vs ejecutados.
*@

@page "/ejecucion-presupuestos"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using System.Linq

@inject IHttpClientFactory fabricaHttp
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Gestión de Ejecución de Presupuestos</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-graph-up me-2"></i>
            Gestión de Ejecución de Presupuestos
        </h5>

        <div class="mb-3 d-flex gap-2 items-center">
            <button type="button" class="btn btn-outline-primary" @onclick="CargarEjecuciones">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todas
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="CargarDatosIniciales">
                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Cargar Datos
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        <h4>Formulario de Ejecución de Presupuesto</h4>
        <EditForm Model="@ejecucionActual" OnValidSubmit="GuardarSegunEstado" FormName="EjecucionForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="ejecucionActual.Id" readonly="@(ejecucionActual.Id > 0)" />
                    <div class="form-text">Solo para búsqueda</div>
                </div>

                <div class="col-md-5">
                    <label class="form-label">Presupuesto *</label>
                    <InputSelect class="form-select" @bind-Value="ejecucionActual.IdPresupuesto">
                        <option value="0">-- Seleccione un presupuesto --</option>
                        @foreach (var presupuesto in listaPresupuestos)
                        {
                            <option value="@presupuesto.Id">
                                @(ObtenerNombreProyecto(presupuesto.IdProyecto)) - $@presupuesto.MontoSolicitado (@presupuesto.Estado)
                            </option>
                        }
                    </InputSelect>
                    <div class="form-text">Seleccione el presupuesto</div>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Año *</label>
                    <InputNumber class="form-control" @bind-Value="ejecucionActual.Anio" min="2020" max="2030" />
                    <div class="form-text">Año de ejecución</div>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Monto Planeado</label>
                    <InputNumber class="form-control" @bind-Value="ejecucionActual.MontoPlaneado" step="0.01" />
                    <div class="form-text">Monto planificado</div>
                </div>
            </div>

            <div class="row g-3 mt-2">
                <div class="col-md-3">
                    <label class="form-label">Monto Ejecutado</label>
                    <InputNumber class="form-control" @bind-Value="ejecucionActual.MontoEjecutado" step="0.01" />
                    <div class="form-text">Monto realmente ejecutado</div>
                </div>

                <div class="col-md-6">
                    <label class="form-label">Observaciones</label>
                    <InputTextArea class="form-control" rows="3" @bind-Value="ejecucionActual.Observaciones" />
                    <div class="form-text">Comentarios sobre la ejecución</div>
                </div>

                <div class="col-md-3">
                    <label class="form-label">% Ejecución</label>
                    <div class="form-control-plaintext">
                        @{
                            var porcentaje = CalcularPorcentajeEjecucion();
                            var claseBadge = porcentaje >= 90 ? "bg-success" : porcentaje >= 70 ? "bg-warning" : "bg-danger";
                        }
                        <span class="badge @claseBadge fs-6">@porcentaje.ToString("F1")%</span>
                    </div>
                    <div class="form-text">Ejecutado vs Planeado</div>
                </div>
            </div>

            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> @textoBotonGuardar
                </button>
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorID">
                    <i class="bi bi-search" aria-hidden="true"></i> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarEjecucion"
                    disabled="@(!existeEjecucion)">
                    <i class="bi bi-pencil-square" aria-hidden="true"></i> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarEjecucion"
                    disabled="@(!existeEjecucion)">
                    <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                </button>
            </div>
        </EditForm>
        <hr />

        @if (cargando)
        {
            <p>Cargando ejecuciones...</p>
        }
        else if (listaEjecuciones.Count == 0)
        {
            <p>No hay ejecuciones de presupuesto disponibles.</p>
        }
        else
        {
            <h4 class="mt-4">Lista de Ejecuciones de Presupuesto</h4>
            
            @* Tarjetas de resumen *@
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-primary">Total Ejecuciones</h5>
                            <h3 class="text-primary">@listaEjecuciones.Count</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-info">Total Planeado</h5>
                            <h3 class="text-info">$@listaEjecuciones.Sum(e => e.MontoPlaneado ?? 0).ToString("N2")</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-success">Total Ejecutado</h5>
                            <h3 class="text-success">$@listaEjecuciones.Sum(e => e.MontoEjecutado ?? 0).ToString("N2")</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-warning">% Ejecución Global</h5>
                            @{
                                var totalPlaneado = listaEjecuciones.Sum(e => e.MontoPlaneado ?? 0);
                                var totalEjecutado = listaEjecuciones.Sum(e => e.MontoEjecutado ?? 0);
                                var porcentajeGlobal = totalPlaneado > 0 ? (totalEjecutado / totalPlaneado) * 100 : 0;
                            }
                            <h3 class="text-warning">@porcentajeGlobal.ToString("F1")%</h3>
                        </div>
                    </div>
                </div>
            </div>

            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Presupuesto</th>
                        <th>Año</th>
                        <th>Planeado</th>
                        <th>Ejecutado</th>
                        <th>% Ejecución</th>
                        <th>Observaciones</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ejecucion in listaEjecuciones.OrderByDescending(e => e.Anio))
                    {
                        <tr>
                            <td>@ejecucion.Id</td>
                            <td>
                                @{
                                    var presupuestoRelacionado = listaPresupuestos
                                    .FirstOrDefault(p => p.Id == ejecucion.IdPresupuesto);
                                }
                                @if (presupuestoRelacionado != null)
                                {
                                    <span>@(ObtenerNombreProyecto(presupuestoRelacionado.IdProyecto))</span><br />
                                    <small class="text-muted">@presupuestoRelacionado.Estado</small>
                                }
                                else
                                {
                                    <span class="text-muted">Presupuesto ID: @ejecucion.IdPresupuesto</span>
                                }
                            </td>
                            <td>
                                <span class="badge bg-primary">@ejecucion.Anio</span>
                            </td>
                            <td>
                                <span class="text-info">$@(ejecucion.MontoPlaneado?.ToString("N2") ?? "0.00")</span>
                            </td>
                            <td>
                                <span class="text-success">$@(ejecucion.MontoEjecutado?.ToString("N2") ?? "0.00")</span>
                            </td>
                            <td>
                                @{
                                    var porcentajeItem = CalcularPorcentajeEjecucion(ejecucion);
                                    var claseBadgeItem = porcentajeItem >= 90 ? "bg-success" : porcentajeItem >= 70 ? "bg-warning" : "bg-danger";
                                }
                                <span class="badge @claseBadgeItem">@porcentajeItem.ToString("F1")%</span>
                            </td>
                            <td>
                                <small>@(ejecucion.Observaciones?.Length > 50 ? ejecucion.Observaciones.Substring(0, 50) + "..." : ejecucion.Observaciones)</small>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => CargarEnFormulario(ejecucion)">
                                    <i class="bi bi-pencil" aria-hidden="true"></i> Editar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<EjecucionPresupuesto> listaEjecuciones = new();
    private List<Presupuesto> listaPresupuestos = new();
    private List<Proyecto> listaProyectos = new();

    [SupplyParameterFromForm]
    private EjecucionPresupuesto ejecucionActual { get; set; } = new();

    private bool existeEjecucion = false;
    private bool cargando = false;
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private string textoBotonGuardar = "Crear Ejecución";

    private const string urlBaseApiEjecuciones = "api/ejecucionPresupuesto";
    private const string urlBaseApiPresupuestos = "api/presupuesto";
    private const string urlBaseApiProyectos = "api/proyecto";

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
        await CargarEjecuciones();
        LimpiarMensajes();
    }

    private async Task CargarDatosIniciales()
    {
        await CargarPresupuestos();
        await CargarProyectos();
        LimpiarMensajes();
    }

    private async Task CargarEjecuciones()
    {
        LimpiarMensajes();
        try
        {
            cargando = true;
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<EjecucionPresupuesto>>>(urlBaseApiEjecuciones);

            listaEjecuciones = respuesta?.Datos ?? new List<EjecucionPresupuesto>();
            mensaje = $"Se cargaron {listaEjecuciones.Count} ejecuciones.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar ejecuciones: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarPresupuestos()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Presupuesto>>>(urlBaseApiPresupuestos);
            listaPresupuestos = respuesta?.Datos ?? new List<Presupuesto>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar presupuestos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task CargarProyectos()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>(urlBaseApiProyectos);
            listaProyectos = respuesta?.Datos ?? new List<Proyecto>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar proyectos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private string ObtenerNombreProyecto(int idProyecto)
    {
        var proyecto = listaProyectos.FirstOrDefault(p => p.Id == idProyecto);
        return proyecto?.Titulo ?? $"Proyecto ID: {idProyecto}";
    }

    private decimal CalcularPorcentajeEjecucion()
    {
        return CalcularPorcentajeEjecucion(ejecucionActual);
    }

    private decimal CalcularPorcentajeEjecucion(EjecucionPresupuesto ejecucion)
    {
        if (ejecucion.MontoPlaneado == null || ejecucion.MontoPlaneado == 0)
        {
            return 0;
        }

        var ejecutado = ejecucion.MontoEjecutado ?? 0;
        return (ejecutado / ejecucion.MontoPlaneado.Value) * 100;
    }

    private async Task BuscarPorID()
    {
        LimpiarMensajes();
        if (ejecucionActual.Id <= 0)
        {
            mensaje = "Por favor ingrese un ID válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiEjecuciones}/id/{ejecucionActual.Id}";
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<EjecucionPresupuesto>>(url);

            if (respuesta?.Exito == true && respuesta.Datos != null)
            {
                ejecucionActual = new EjecucionPresupuesto()
                {
                    Id = respuesta.Datos.Id,
                    IdPresupuesto = respuesta.Datos.IdPresupuesto,
                    Anio = respuesta.Datos.Anio,
                    MontoPlaneado = respuesta.Datos.MontoPlaneado,
                    MontoEjecutado = respuesta.Datos.MontoEjecutado,
                    Observaciones = respuesta.Datos.Observaciones
                };

                existeEjecucion = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Ejecución encontrada y cargada en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Ejecución no encontrada.";
                claseAviso = "alert alert-warning";
                existeEjecucion = false;
                textoBotonGuardar = "Crear";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar ejecución: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        LimpiarMensajes();

        if (ejecucionActual.IdPresupuesto <= 0)
        {
            mensaje = "Debe seleccionar un presupuesto.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (ejecucionActual.Anio <= 0)
        {
            mensaje = "Debe ingresar un año válido.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (existeEjecucion)
        {
            await ActualizarEjecucion();
        }
        else
        {
            await CrearEjecucion();
        }
    }

    private async Task CrearEjecucion()
    {
        LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.PostAsJsonAsync(urlBaseApiEjecuciones, ejecucionActual);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Ejecución creada correctamente.";
                claseAviso = "alert alert-success";
                await CargarEjecuciones();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear ejecución: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear ejecución: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarEjecucion()
    {
        LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.PutAsJsonAsync($"{urlBaseApiEjecuciones}/{ejecucionActual.Id}", ejecucionActual);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Ejecución actualizada correctamente.";
                claseAviso = "alert alert-success";
                await CargarEjecuciones();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar ejecución: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar ejecución: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarEjecucion()
    {
        LimpiarMensajes();
        if (ejecucionActual.Id <= 0)
        {
            mensaje = "ID de ejecución inválido para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiEjecuciones}/id/{ejecucionActual.Id}";
            var respuesta = await httpClient.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Ejecución eliminada correctamente.";
                claseAviso = "alert alert-success";
                await CargarEjecuciones();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al eliminar ejecución: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar ejecución: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(EjecucionPresupuesto ejecucion)
    {
        LimpiarMensajes();
        ejecucionActual = new EjecucionPresupuesto
        {
            Id = ejecucion.Id,
            IdPresupuesto = ejecucion.IdPresupuesto,
            Anio = ejecucion.Anio,
            MontoPlaneado = ejecucion.MontoPlaneado,
            MontoEjecutado = ejecucion.MontoEjecutado,
            Observaciones = ejecucion.Observaciones
        };

        existeEjecucion = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Ejecución cargada en formulario.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    private void LimpiarFormulario()
    {
        ejecucionActual = new EjecucionPresupuesto();
        existeEjecucion = false;
        textoBotonGuardar = "Crear Ejecución";
        LimpiarMensajes();
    }
}
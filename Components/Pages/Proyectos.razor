@*  
- @page "/proyectos"
- Autor: Victor Oliveros
- Fecha: 10/2025
- Version: 1.0
- Descripción: Página para gestionar proyectos, vinculados a responsables y tipos de proyecto.
- Notas: Basada en la estructura de Archivos.razor

Documentación: Permite gestionar proyectos con sus fechas, responsables y tipos y productos asociados a través de un formulario y una tabla de visualización.

TODO: Agregar la funcionalidad de asociar productos a proyectos.
*@



@page "/proyectos"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq

@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Gestión de Proyectos</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-folder me-2"></i>
            Gestión de Proyectos
        </h5>

        <div class="mb-3 d-flex gap-2 items-center">
            <button type="button" class="btn btn-outline-primary" @onclick="CargarProyectos">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todos
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="CargarDatosIniciales">
                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Cargar Datos
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        <h4>Formulario de Proyecto</h4>
        <EditForm Model="@proyectoActual" OnValidSubmit="GuardarSegunEstado" FormName="ProyectoForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="proyectoActual.Id" />
                    <div class="form-text">Solo para búsqueda</div>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Código</label>
                    <InputText class="form-control" @bind-Value="proyectoActual.Codigo" />
                    <div class="form-text">Código del proyecto</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Título *</label>
                    <InputText class="form-control" @bind-Value="proyectoActual.Titulo" />
                    <div class="form-text">Nombre del proyecto</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Proyecto Padre</label>
                    <InputSelect class="form-control" @bind-Value="proyectoActual.IdProyectoPadre">
                        <option value="">-- Sin proyecto padre --</option>
                        @foreach (var proyecto in listaProyectos.Where(p => p.Id != proyectoActual.Id))
                        {
                            <option value="@proyecto.Id">@proyecto.Titulo</option>
                        }
                    </InputSelect>
                    <div class="form-text">Proyecto principal (opcional)</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Responsable *</label>
                    <InputSelect class="form-control" @bind-Value="proyectoActual.IdResponsable">
                        <option value="0">-- Seleccione un responsable --</option>
                        @foreach (var responsable in listaResponsables)
                        {
                            <option value="@responsable.Id">@responsable.Nombre</option>
                        }
                    </InputSelect>
                    <div class="form-text">Responsable del proyecto</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Tipo de Proyecto *</label>
                    <InputSelect class="form-control" @bind-Value="proyectoActual.IdTipoProyecto">
                        <option value="0">-- Seleccione un tipo --</option>
                        @foreach (var tipo in listaTiposProyecto)
                        {
                            <option value="@tipo.Id">@tipo.Nombre</option>
                        }
                    </InputSelect>
                    <div class="form-text">Tipo del proyecto</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Ruta Logo</label>
                    <InputText class="form-control" @bind-Value="proyectoActual.RutaLogo" />
                    <div class="form-text">URL o ruta del logo</div>
                </div>

                <div class="col-md-12">
                    <label class="form-label">Descripción</label>
                    <InputTextArea class="form-control" rows="3" @bind-Value="proyectoActual.Descripcion" />
                    <div class="form-text">Descripción detallada del proyecto</div>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Inicio</label>
                    <InputDate class="form-control" @bind-Value="proyectoActual.FechaInicio" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Fin Prevista</label>
                    <InputDate class="form-control" @bind-Value="proyectoActual.FechaFinPrevista" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Modificación</label>
                    <InputDate class="form-control" @bind-Value="proyectoActual.FechaModificacion" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Finalización</label>
                    <InputDate class="form-control" @bind-Value="proyectoActual.FechaFinalizacion" />
                </div>
            </div>

            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> @textoBotonGuardar
                </button>
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorID">
                    <i class="bi bi-search" aria-hidden="true"></i> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarProyecto" disabled="@(!existeProyecto)">
                    <i class="bi bi-pencil-square" aria-hidden="true"></i> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarProyecto" disabled="@(!existeProyecto)">
                    <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                </button>
            </div>
        </EditForm>
        <hr />

        @if (cargando)
        {
            <p>Cargando proyectos...</p>
        }
        else if (listaProyectos.Count == 0)
        {
            <p>No hay proyectos disponibles.</p>
        }
        else
        {
            <h4 class="mt-4">Lista de Proyectos</h4>
            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Código</th>
                        <th>Título</th>
                        <th>Responsable</th>
                        <th>Tipo</th>
                        <th>Fecha Inicio</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var proyecto in listaProyectos)
                    {
                        <tr>
                            <td>@proyecto.Id</td>
                            <td>@proyecto.Codigo</td>
                            <td>@proyecto.Titulo</td>
                            <td>
                                @{
                                    var responsableRelacionado = listaResponsables
                                        .FirstOrDefault(r => r.Id == proyecto.IdResponsable);
                                }
                                @(responsableRelacionado?.Nombre ?? $"Responsable ID: {proyecto.IdResponsable}")
                            </td>
                            <td>
                                @{
                                    var tipoRelacionado = listaTiposProyecto
                                        .FirstOrDefault(t => t.Id == proyecto.IdTipoProyecto);
                                }
                                @(tipoRelacionado?.Nombre ?? $"Tipo ID: {proyecto.IdTipoProyecto}")
                            </td>
                            <td>@(proyecto.FechaInicio?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                            <td>
                                @if (proyecto.FechaFinalizacion.HasValue)
                                {
                                    <span class="badge bg-success">Finalizado</span>
                                }
                                else if (proyecto.FechaFinPrevista < DateTime.Now)
                                {
                                    <span class="badge bg-danger">Retrasado</span>
                                }
                                else
                                {
                                    <span class="badge bg-primary">En Progreso</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => CargarEnFormulario(proyecto)">
                                    <i class="bi bi-pencil" aria-hidden="true"></i> Editar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<Proyecto> listaProyectos = new();
    private List<Responsable> listaResponsables = new();
    private List<TipoProyecto> listaTiposProyecto = new();

    [SupplyParameterFromForm]
    private Proyecto proyectoActual { get; set; } = new();

    private bool existeProyecto = false;
    private bool cargando = false;
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private string textoBotonGuardar = "Crear Proyecto";

    private const string urlBaseApiProyectos = "api/proyecto";
    private const string urlBaseApiResponsables = "api/responsable";
    private const string urlBaseApiTiposProyecto = "api/tipoproyecto";

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
        await CargarProyectos();
        LimpiarMensajes();
    }

    private async Task CargarDatosIniciales()
    {
        await CargarResponsables();
        await CargarTiposProyecto();
    }

    private async Task CargarProyectos()
    {
        LimpiarMensajes();
        try
        {
            cargando = true;
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>(urlBaseApiProyectos);

            listaProyectos = respuesta?.Datos ?? new List<Proyecto>();
            mensaje = $"Se cargaron {listaProyectos.Count} proyectos.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar proyectos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarResponsables()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Responsable>>>(urlBaseApiResponsables);
            listaResponsables = respuesta?.Datos ?? new List<Responsable>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar responsables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task CargarTiposProyecto()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<TipoProyecto>>>(urlBaseApiTiposProyecto);
            listaTiposProyecto = respuesta?.Datos ?? new List<TipoProyecto>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar tipos de proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task BuscarPorID()
    {
        LimpiarMensajes();
        if (proyectoActual.Id <= 0)
        {
            mensaje = "Por favor ingrese un ID válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiProyectos}/id/{proyectoActual.Id}";
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>(url);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado != null)
            {
                proyectoActual = new Proyecto()
                {
                    Id = encontrado.Id,
                    IdProyectoPadre = encontrado.IdProyectoPadre,
                    IdResponsable = encontrado.IdResponsable,
                    IdTipoProyecto = encontrado.IdTipoProyecto,
                    Codigo = encontrado.Codigo,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion,
                    FechaInicio = encontrado.FechaInicio,
                    FechaFinPrevista = encontrado.FechaFinPrevista,
                    FechaModificacion = encontrado.FechaModificacion,
                    FechaFinalizacion = encontrado.FechaFinalizacion,
                    RutaLogo = encontrado.RutaLogo
                };

                existeProyecto = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Proyecto encontrado y cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Proyecto no encontrado.";
                claseAviso = "alert alert-warning";
                existeProyecto = false;
                textoBotonGuardar = "Crear";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        LimpiarMensajes();

        if (proyectoActual.IdResponsable <= 0)
        {
            mensaje = "Debe seleccionar un responsable.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (proyectoActual.IdTipoProyecto <= 0)
        {
            mensaje = "Debe seleccionar un tipo de proyecto.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (string.IsNullOrWhiteSpace(proyectoActual.Titulo))
        {
            mensaje = "El título del proyecto es requerido.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (existeProyecto)
        {
            await ActualizarProyecto();
        }
        else
        {
            await CrearProyecto();
        }
    }

    private async Task CrearProyecto()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            var proyectoParaCrear = new
            {
                IdProyectoPadre = proyectoActual.IdProyectoPadre,
                IdResponsable = proyectoActual.IdResponsable,
                IdTipoProyecto = proyectoActual.IdTipoProyecto,
                Codigo = proyectoActual.Codigo,
                Titulo = proyectoActual.Titulo,
                Descripcion = proyectoActual.Descripcion,
                FechaInicio = proyectoActual.FechaInicio,
                FechaFinPrevista = proyectoActual.FechaFinPrevista,
                FechaModificacion = proyectoActual.FechaModificacion,
                FechaFinalizacion = proyectoActual.FechaFinalizacion,
                RutaLogo = proyectoActual.RutaLogo
            };

            var respuesta = await httpClient.PostAsJsonAsync(urlBaseApiProyectos, proyectoParaCrear);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Proyecto creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProyectos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear proyecto: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarProyecto()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            var proyectoParaActualizar = new
            {
                IdProyectoPadre = proyectoActual.IdProyectoPadre,
                IdResponsable = proyectoActual.IdResponsable,
                IdTipoProyecto = proyectoActual.IdTipoProyecto,
                Codigo = proyectoActual.Codigo,
                Titulo = proyectoActual.Titulo,
                Descripcion = proyectoActual.Descripcion,
                FechaInicio = proyectoActual.FechaInicio,
                FechaFinPrevista = proyectoActual.FechaFinPrevista,
                FechaModificacion = proyectoActual.FechaModificacion,
                FechaFinalizacion = proyectoActual.FechaFinalizacion,
                RutaLogo = proyectoActual.RutaLogo
            };

            var respuesta = await httpClient.PutAsJsonAsync($"{urlBaseApiProyectos}/{proyectoActual.Id}", proyectoParaActualizar);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Proyecto actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProyectos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar proyecto: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarProyecto()
    {
        if (proyectoActual.Id <= 0)
        {
            mensaje = "ID de proyecto inválido para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiProyectos}/id/{proyectoActual.Id}";
            var respuesta = await httpClient.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Proyecto eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarProyectos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al eliminar proyecto: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Proyecto proyecto)
    {
        proyectoActual = new Proyecto
        {
            Id = proyecto.Id,
            IdProyectoPadre = proyecto.IdProyectoPadre,
            IdResponsable = proyecto.IdResponsable,
            IdTipoProyecto = proyecto.IdTipoProyecto,
            Codigo = proyecto.Codigo,
            Titulo = proyecto.Titulo,
            Descripcion = proyecto.Descripcion,
            FechaInicio = proyecto.FechaInicio,
            FechaFinPrevista = proyecto.FechaFinPrevista,
            FechaModificacion = proyecto.FechaModificacion,
            FechaFinalizacion = proyecto.FechaFinalizacion,
            RutaLogo = proyecto.RutaLogo
        };

        existeProyecto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Proyecto cargado en formulario.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    private void LimpiarFormulario()
    {
        proyectoActual = new Proyecto();
        existeProyecto = false;
        textoBotonGuardar = "Crear Proyecto";
        LimpiarMensajes();
    }
}


@*  
- @page "/archivos"
- Autor: Victor Oliveros
- Fecha: 10/2025
-version: 1.0
- Descripción: Página para gestionar archivos, incluyendo carga, visualización y eliminación.
-Notas de la versión:
- 1.0 - Versión inicial con funcionalidades básicas de gestión de archivos.

Documentación: Permite a los usuarios cargar, ver y eliminar archivos. Utiliza HttpClient para interactuar con una API RESTful.
*@

@page "/archivos"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq

@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Gestión de Archivos</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-paperclip me-2"></i>
            Gestipon de Archivos
        </h5>

        @*
         @* 
         EXPLICACIÓN: Barra de acciones principales
        Esta sección proporciona botones para las operaciones más comunes que el usuario realizará
        *@ 

        <div class="mb-3 d-flex gap-2 items-center">
            <button type="button" class="btn btn-outline-primary" @onclick="CargarArchivos">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todos
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="CargarUsuarios">
                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Cargar Usuarios
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @*  
        EXPLICACIÓN: Área de mensajes
        Esta div muestra mensajes de retroalimentación al usuario (éxito, error, advertencia)
        La clase CSS se asigna dinámicamente según el tipo de mensaje
        *@
        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        @* 
         @* 
        EXPLICACIÓN: Formulario principal
        EditForm es un componente de Blazor que proporciona validación automática
        y manejo de envío de formularios. El atributo Model vincula el formulario
        a nuestro objeto 'archivoActual'.
        *@
        <h4>Formulario de Archivo</h4>
        <EditForm Model="@archivoActual" OnValidSubmit="GuardarSegunEstado" FormName="Archivoform">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                @* 
                EXPLICACIÓN: Campo ID - Solo lectura para búsqueda
                Este campo permite al usuario ingresar un ID para buscar una un archivo existente
                No se usa para crear nuevos registros (autoincrement)
                *@
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="archivoActual.Id" />
                    <div class="form-text"> solo búsqueda</div>
                </div>


                @* 
                EXPLICACIÓN: Campo de Clave Foránea - CONCEPTO IMPORTANTE
                Este es un InputSelect que permite al usuario elegir una Variable Usuario  existente.
                La propiedad @bind-Value se vincula a IdVariable (la clave foránea).
                Las opciones se llenan desde "listaUsurios" que cargamos de la API.
                *@
                <div class="col-md-3">
                    <label class="form-label">Usuario (Id)</label>
                    <InputSelect class="form-control" @bind-Value="archivoActual.IdUsuario">
                        <option value="0">Seleccione un Usario</option>

                        @* BUCLE FORAECH: Recorre cada usuario en la lista y crea una opción  en select ID con su email *@
                        @foreach (var usuario in listaUsuarios)
                        {
                            <option value="@usuario.Id">@usuario.Email (@usuario.Id)</option>
                        }
                    </InputSelect>
                    <div class="form-text">Seleccione el Email del Usuario asociado</div>
                </div>
                @* 
                EXPLICACIÓN: Campo de texto para Ruta
                Estos campos funcionan igual que en formularios anteriores
                Vinculamos la propiedad correspondiente del objeto archivoActual
                *@
                <div class="col-md-2">
                    <label class="form-label">Ruta</label>
                    <InputText class="form-control" @bind-Value="archivoActual.Ruta" />
                </div>

                <div class="col-md-2">
                    <label class="form-label">Nombre</label>
                    <InputText class="form-control" @bind-Value="archivoActual.Nombre" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Tipo</label>
                    <InputText class="form-control" @bind-Value="archivoActual.Tipo" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Fecha</label>
                    <InputDate class="form-control" @bind-Value="archivoActual.Fecha"
                        min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                </div>
            </div>

            @* 
            EXPLICACIÓN: Botones de acción del formulario
            Cada botón tiene una función específica y algunos se deshabilitan dinámicamente
            según el estado actual (si existe o no un objetivo cargado)
            *@
            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> @textoBotonGuardar
                </button>
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorID">
                    <i class="bi bi-search" aria-hidden="true"></i> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarArchivo" disabled="@(!existeArchivo)">
                    <i class="bi bi-pencil-square" aria-hidden="true"></i> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarArchivo" disabled="@(!existeArchivo)">
                    <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                </button>
            </div>
        </EditForm>
        <hr />


        @*
        Tabla de visualización de archivos
        Muestra la lista de archivos cargados desde la API  
        *@
        @if (cargando)
        {
            <p>Cargando archivos...</p>
        }
        else if (listaArchivos.Count == 0)
        {
            <p>No hay archivos disponibles.</p>
        }
        else
        {
            <h4 class="mt-4">Lista de Archivos</h4>
            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Usuario</th>
                        <th>Ruta</th>
                        <th>Nombre</th>
                        <th>Tipo</th>
                        <th>Fecha</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var archivo in listaArchivos)
                    {
                        <tr>
                            <td>@archivo.Id</td>
                            <td>@{
                                var usuario = listaUsuarios.FirstOrDefault(u => u.Id == archivo.IdUsuario);
                                }
                                @(usuario?.Email ?? "Desconocido")
                              </td>
                            <td>@archivo.Ruta</td>
                            <td>@archivo.Nombre</td>
                            <td>@archivo.Tipo</td>
                            <td>@(archivo.Fecha?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => CargarEnFormulario(archivo)">
                                    <i class="bi bi-cloud-arrow-up" aria-hidden="true"></i> Editar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {

    // ==========================================
    // EXPLICACIÓN: VARIABLES DE ESTADO
    // Variables que mantienen el estado de la página y los datos cargados
    // ==========================================

    /*
    Conceptos Clave: Variables de Estado, Manejo de Datos, Interactividad, manejo de claves foráneas.
    CRUD, Validaciones
    - Archivos: Lista de archivos cargados desde la API
    - Usuarios: Lista de usuarios para asignar a los archivos (clave foránea)
    - NuevoArchivo: Objeto que representa un nuevo archivo a cargar
    - EditarArchivo: Objeto que representa un archivo en edición
    - cargando: Indica si se están cargando datos desde la API

    */

    //Lista principal de archivos
    private List<Archivo> listaArchivos = new();

    //Lista de usuarios para asignar a los archivos (clave foránea)
    //Se carga desde la API al inicializar la página
    private List<Usuario> listaUsuarios = new();

    //Objeto viculado al formulario de creación de un nuevo archivo
    [SupplyParameterFromForm]
    private Archivo archivoActual { get; set; } = new();


    //Variables para controlar el estado del formulario de carga
    private bool existeArchivo = false; //Indica si se muestra el formulario de carga
    private bool cargando = false; //Indica si se está cargando datos
    private string mensaje = ""; //Mensaje para mostrar resultado de operaciones
    private string claseAviso = "alert alert-info"; //Clase CSS de la alerta
    private string textoBotonGuardar = "Crear Archivo"; //Texto del botón de guardar nuevo archivo / Actualizar archivo

    //Constantes para las URLs de la API
    private const string urlBaseApiArchivos = "api/archivo"; //Para cargar archivos
    private const string urlBaseApiUsuario = "api/usuario"; //Para cargar usuarios (clave foránea)

    // ==========================================
    // EXPLICACIÓN: MÉTODOS DE CICLO DE VIDA
    // Estos métodos se ejecutan en diferentes etapas del ciclo de vida del componente
    // ==========================================

    protected override async Task OnInitializedAsync()

    {
        await CargarArchivos();
        await CargarUsuarios();
        LimpiarMensajes();
    }

    // ==========================================
    // EXPLICACIÓN: MÉTODOS DE CARGA DE DATOS
    // Métodos para cargar datos desde la API
    // ==========================================

    //Carga la lista de archivos desde la API
    private async Task CargarArchivos()
    {
        LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Archivo>>>(urlBaseApiArchivos);

            listaArchivos = respuesta?.Datos ?? new List<Archivo>(); //Si no hay datos, inicializa con una lista vacía

            mensaje = "Archivos cargados correctamente.";
            claseAviso = "alert alert-success";

        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar archivos: {error.Message}";
            claseAviso = "alert alert-danger";
        }

    }

    //Carga la lista de usuarios desde la API (clave foránea)
    private async Task CargarUsuarios()
    {
        LimpiarMensajes();
        try
        {
            cargando = true;
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Usuario>>>(urlBaseApiUsuario);

            listaUsuarios = respuesta?.Datos ?? new List<Usuario>(); //Si no hay datos, inicializa con una lista vacía

            mensaje = "Usuarios cargados correctamente.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar usuarios: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;

        }
    }

    // Busca el archivo por el ID lo carga en el formulario y permite al usuario editarlo
    private async Task BuscarPorID()
    {
        LimpiarMensajes();
        if (archivoActual.Id <= 0)
        {
            mensaje = "Por favor ingrese un ID válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiArchivos}/id/{archivoActual.Id}";
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Archivo>>>(url);
            var archivoEncontrado = respuesta?.Datos?.FirstOrDefault();

            if (archivoEncontrado != null)
            {
                archivoActual = new Archivo ()
                {
                    Id = archivoEncontrado.Id,
                    IdUsuario = archivoEncontrado.IdUsuario,
                    Ruta = archivoEncontrado.Ruta,
                    Nombre = archivoEncontrado.Nombre,
                    Tipo = archivoEncontrado.Tipo,
                    Fecha = archivoEncontrado.Fecha
                };

                existeArchivo = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Archivo encontrado y cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Archivo no encontrado.";
                claseAviso = "alert alert-warning";
                existeArchivo = false;
                textoBotonGuardar = "Crear";
            }


        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar archivo: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }



    //Guarda el archivo actual, crea uno nuevo o actualiza uno existente según el estado
    private async Task GuardarSegunEstado()
    {
        LimpiarMensajes();

        //Logica para validar que se haya seleccionado un usuario (Clave foránea)
        if (archivoActual.IdUsuario <= 0)
        {
            mensaje = "Debe seleccionar un usuario.";
            claseAviso = "alert alert-warning";
            return;
        }

        //Logica para crear o actualizar
        if (existeArchivo)
        {
            await ActualizarArchivo();
        }
        else
        {
            await CrearArchivo();


        }
    }

    //Crea un nuevo archivo en la API
    private async Task CrearArchivo()
    {
        LimpiarMensajes();

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            var archivoParaCrear = new
            {

                IdUsuario = archivoActual.IdUsuario,
                Ruta = archivoActual.Ruta,
                Nombre = archivoActual.Nombre,
                Tipo = archivoActual.Tipo,
                Fecha = archivoActual.Fecha
            };

            var respuesta = await httpClient.PostAsJsonAsync(urlBaseApiArchivos, archivoParaCrear);

            if (respuesta.IsSuccessStatusCode)
            {
                var archivoCreado = await respuesta.Content.ReadFromJsonAsync<RespuestaApi<Archivo>>();

                //actualiza la lista para reflejar el nuevo archivo
                if (archivoCreado != null)
                {
                    mensaje = "Archivo creado correctamente.";
                    claseAviso = "alert alert-success";

                    //refrescamos la lista de archivos
                    await CargarArchivos();
                    LimpiarFormulario();
                }


            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear archivo: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear archivo: {error.Message}";
            claseAviso = "alert alert-danger";
        }



    }


    //Actualiza un archivo existente en la API
    private async Task ActualizarArchivo()
    {
        LimpiarMensajes();

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiArchivos}/id/{archivoActual.Id}";

            var archivoParaActualizar = new
            {
                IdUsuario = archivoActual.IdUsuario,
                Ruta = archivoActual.Ruta,
                Nombre = archivoActual.Nombre,
                Tipo = archivoActual.Tipo,
                Fecha = archivoActual.Fecha


            };

            var respuesta = await httpClient.PutAsJsonAsync($"{urlBaseApiArchivos}/{archivoActual.Id}", archivoParaActualizar);

            if (respuesta.IsSuccessStatusCode)
            {
                var archivoActualizado = await respuesta.Content.ReadFromJsonAsync<RespuestaApi<Archivo>>();

                //actualiza la lista para reflejar el archivo actualizado
                if (archivoActualizado != null)
                {
                    mensaje = "Archivo actualizado correctamente.";
                    claseAviso = "alert alert-success";

                    //refrescamos la lista de archivos
                    await CargarArchivos();
                    LimpiarFormulario();
                }
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar archivo: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar archivo: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    //Elimina un archivo por su ID
    private async Task EliminarArchivo()
    {
        LimpiarMensajes();

        if (archivoActual.Id <= 0)
        {
            mensaje = "ID de archivo inválido para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiArchivos}/id/{archivoActual.Id}";
            var respuesta = await httpClient.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Archivo eliminado correctamente.";
                claseAviso = "alert alert-success";

                //refrescamos la lista de archivos
                await CargarArchivos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al eliminar archivo: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar archivo: {error.Message}";
            claseAviso = "alert alert-danger";
        }

    }


    // ==========================================
    // EXPLICACIÓN: MÉTODOS AUXILIARES
    // ==========================================

    //cargar datos de un archivo en el formulario para editar
    private async Task CargarEnFormulario(Archivo archivo)
    {
        LimpiarMensajes();
        
        archivoActual = new Archivo
        {
            Id = archivo.Id,
            IdUsuario = archivo.IdUsuario,
            Ruta = archivo.Ruta,
            Nombre = archivo.Nombre,
            Tipo = archivo.Tipo,
            Fecha = archivo.Fecha
        };

        //actualiza el estado del formulario
        existeArchivo = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Archivo cargado en formulario.";
        claseAviso = "alert alert-info";

    }

    // Limpia mensajes de estado
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    // MÉTODO: Reinicia el formulario a su estado inicial
    private void LimpiarFormulario()
    {
        archivoActual = new Archivo();
        existeArchivo = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }

}
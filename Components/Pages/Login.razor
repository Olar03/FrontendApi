@*  
- @page "/login"
- Autor: Victor Oliveros
- Fecha: 10/2025
- Version: 1.0
- Descripción: Página de login completa para autenticación de usuarios.
- Notas: Sistema de autenticación funcional con validación y navegación

Documentación: Página de autenticación completa que valida usuario y contraseña contra la API.
*@

@page "/"
@layout FrontendBlazorApi.Components.Layout.EmptyLayout

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@using System.ComponentModel.DataAnnotations

@inject IHttpClientFactory fabricaHttp
@inject NavigationManager navegacion
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Iniciar Sesión - Sistema de Proyectos</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center"
    style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
    <div class="row w-100">
        <div class="col-md-6 col-lg-4 mx-auto">
            <!-- Tarjeta principal de login -->
            <div class="card shadow-lg border-0 rounded-4">
                <div class="card-header text-white text-center py-4 rounded-top-4"
                    style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);">
                    <div class="mb-3">
                        <i class="bi bi-shield-lock display-3"></i>
                    </div>
                    <h3 class="mb-1 fw-bold">Sistema de Proyectos</h3>
                    <p class="mb-0 opacity-90">Ingrese sus credenciales para acceder</p>
                </div>

                <div class="card-body p-4">
                    @if (!string.IsNullOrWhiteSpace(mensaje))
                    {
                        <div class="@claseAlerta alert-dismissible fade show" role="alert">
                            <i class="bi @iconoAlerta me-2"></i>
                            @mensaje
                            <button type="button" class="btn-close" @onclick="LimpiarMensajes" aria-label="Close"></button>
                        </div>
                    }

                    <EditForm Model="@modeloLogin" OnValidSubmit="ProcesarLogin" FormName="LoginForm">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-envelope me-2 text-primary"></i>
                                Correo Electrónico
                            </label>
                            <InputText class="form-control form-control-lg shadow-sm" @bind-Value="modeloLogin.Email"
                                placeholder="ejemplo@correo.com" disabled="@cargando" autocomplete="email" />
                            <ValidationMessage For="@(() => modeloLogin.Email)" class="text-danger small mt-1" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-lock me-2 text-primary"></i>
                                Contraseña
                            </label>
                            <div class="input-group">
                                <InputText type="@tipoPassword" class="form-control form-control-lg shadow-sm"
                                    @bind-Value="modeloLogin.Contrasena" placeholder="Ingrese su contraseña"
                                    disabled="@cargando" autocomplete="current-password" />
                                <button class="btn btn-outline-secondary" type="button"
                                    @onclick="TogglePasswordVisibility" disabled="@cargando">
                                    <i class="bi @iconoPassword"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => modeloLogin.Contrasena)" class="text-danger small mt-1" />
                        </div>

                        <div class="mb-4 d-flex justify-content-between align-items-center">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="recordarme" disabled="@cargando" />
                                <label class="form-check-label small">
                                    Recordar mis credenciales
                                </label>
                            </div>
                            <a href="#" class="text-decoration-none small text-primary" @onclick:preventDefault="true"
                                @onclick="MostrarAyuda">
                                ¿Olvidaste tu contraseña?
                            </a>
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary btn-lg shadow-sm fw-semibold"
                                disabled="@cargando">
                                @if (cargando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"
                                        aria-hidden="true"></span>
                                    <span>Verificando credenciales...</span>
                                }
                                else
                                {
                                    <i class="bi bi-box-arrow-in-right me-2"></i>
                                    <span>Iniciar Sesión</span>
                                }
                            </button>
                        </div>

                        <ValidationSummary class="text-danger small" />
                    </EditForm>

                    <div class="text-center">
                        <hr class="my-4" />
                        <div class="d-flex align-items-center justify-content-center mb-2">
                            <i class="bi bi-info-circle text-info me-2"></i>
                            <small class="text-muted fw-semibold">Credenciales de Acceso Rápido</small>
                        </div>
                        <div class="row g-2">
                            <div class="col-6">
                                <button class="btn btn-outline-primary btn-sm w-100" @onclick="SeleccionarAdmin"
                                    disabled="@cargando">
                                    <i class="bi bi-person-gear"></i>
                                    <small>Administrador</small>
                                </button>
                            </div>
                            <div class="col-6">
                                <button class="btn btn-outline-success btn-sm w-100" @onclick="CargarUsuarioDemo"
                                    disabled="@cargando">
                                    <i class="bi bi-person"></i>
                                    <small>Usuario Demo</small>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-footer bg-light text-center py-3 rounded-bottom-4">
                    <small class="text-muted">
                        <i class="bi bi-shield-check me-1 text-success"></i>
                        Sistema Seguro v1.0 © 2025
                        <br />
                        <i class="bi bi-code-slash me-1"></i>
                        Desarrollado por Victor Oliveros
                    </small>
                </div>
            </div>

            <!-- Panel de usuarios disponibles (solo si hay usuarios cargados) -->
            @if (mostrarUsuarios && usuariosDisponibles.Any())
            {
                <div class="card mt-3 border-info shadow">
                    <div class="card-header bg-info text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <span>
                                <i class="bi bi-people me-2"></i>
                                Usuarios de Prueba (@usuariosDisponibles.Count disponibles)
                            </span>
                            <button class="btn btn-sm btn-outline-light" @onclick="() => mostrarUsuarios = false">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row g-2">
                            @foreach (var usuario in usuariosDisponibles.Take(8))
                            {
                                <div class="col-md-6">
                                    <button class="btn btn-outline-info btn-sm w-100 text-start"
                                        @onclick="() => SeleccionarUsuario(usuario)" disabled="@cargando">
                                        <i class="bi bi-person-circle me-1"></i>
                                        <small>@usuario.Email</small>
                                    </button>
                                </div>
                            }
                        </div>
                        <div class="text-center mt-2">
                            <small class="text-muted">
                                <i class="bi bi-lightbulb"></i>
                                Haga clic en cualquier email. Las contraseñas son las reales de cada usuario.
                            </small>
                        </div>
                    </div>
                </div>
            }

            <!-- Ayuda flotante -->
            @if (mostrarAyuda)
            {
                <div class="card mt-3 border-warning shadow">
                    <div class="card-header bg-warning">
                        <div class="d-flex justify-content-between align-items-center">
                            <span>
                                <i class="bi bi-question-circle me-2"></i>
                                Ayuda para Acceder
                            </span>
                            <button class="btn btn-sm btn-outline-dark" @onclick="() => mostrarAyuda = false">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <h6><i class="bi bi-person-gear text-primary"></i> Administrador:</h6>
                                <ul class="small mb-3">
                                    <li><strong>Email:</strong> admin@sistema.com</li>
                                    <li><strong>Contraseña:</strong> La registrada en la base de datos</li>
                                    <li><strong>Permisos:</strong> Acceso completo al sistema</li>
                                </ul>

                                <h6><i class="bi bi-people text-success"></i> Usuarios Registrados:</h6>
                                <ul class="small mb-3">
                                    <li><strong>Email:</strong> Cualquier usuario registrado en el sistema</li>
                                    <li><strong>Contraseña:</strong> La contraseña real de cada usuario</li>
                                    <li><strong>Permisos:</strong> Acceso estándar</li>
                                </ul>

                                <div class="alert alert-info py-2">
                                    <small>
                                        <i class="bi bi-info-circle"></i>
                                        <strong>Nota:</strong> El sistema ahora usa las credenciales reales
                                        almacenadas en la base de datos para cada usuario.
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // ==========================================
    // MODELO PARA EL FORMULARIO DE LOGIN
    // ==========================================
    public class ModeloLogin
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(3, ErrorMessage = "La contraseña debe tener al menos 3 caracteres")]
        public string Contrasena { get; set; } = string.Empty;
    }

    // ==========================================
    // VARIABLES DE ESTADO
    // ==========================================
    [SupplyParameterFromForm]
    private ModeloLogin modeloLogin { get; set; } = new();

    private List<Usuario> usuariosDisponibles = new();
    private bool cargando = false;
    private bool recordarme = false;
    private bool mostrarUsuarios = false;
    private bool mostrarAyuda = false;
    private bool mostrarPassword = false;
    private string mensaje = "";
    private string claseAlerta = "";
    private string iconoAlerta = "";

    private const string urlBaseApiUsuarios = "api/usuario";

    // Propiedades computadas para la UI
    private string tipoPassword => mostrarPassword ? "text" : "password";
    private string iconoPassword => mostrarPassword ? "bi-eye-slash" : "bi-eye";

    // ==========================================
    // CICLO DE VIDA DEL COMPONENTE
    // ==========================================
    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
        VerificarParametrosURL();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
// Enfocar el campo de email al cargar
const emailInput = document.querySelector('input[type=""email""]');
if (emailInput) emailInput.focus();

// Manejar Enter en el formulario
document.addEventListener('keypress', function(e) {
if (e.key === 'Enter' && !e.target.closest('.btn')) {
const submitBtn = document.querySelector('button[type=""submit""]');
if (submitBtn && !submitBtn.disabled) submitBtn.click();
}
});
");
        }
    }

    // ==========================================
    // MÉTODOS DE AUTENTICACIÓN
    // ==========================================
    private async Task ProcesarLogin()
    {
        LimpiarMensajes();
        cargando = true;

        try
        {
            // Buscar usuario en la API
            var usuario = await BuscarUsuarioPorEmail(modeloLogin.Email);

            if (usuario != null)
            {
                if (!usuario.Activo)
                {
                    MostrarMensaje("Usuario inactivo. Contacte al administrador.", "warning", "bi-person-x");
                    return;
                }

                // Validar contraseña real del usuario
                if (ValidarContrasenaReal(modeloLogin.Contrasena, usuario.Contrasena))
                {
                    // Determinar si es administrador por tipo de usuario
                    bool esAdmin = usuario.TipoUsuario.Equals("Admin", StringComparison.OrdinalIgnoreCase);
                    await IniciarSesionExitosa(usuario.Email, usuario.Id ?? 0, esAdmin, usuario.TipoUsuario);
                }
                else
                {
                    MostrarMensaje("Contraseña incorrecta. Verifique sus credenciales.", "danger", "bi-key");
                }
            }
            else
            {
                MostrarMensaje("Usuario no encontrado. Verifique el email ingresado.", "warning", "bi-person-exclamation");
                mostrarUsuarios = true; // Mostrar usuarios disponibles
            }
        }
        catch (Exception error)
        {
            MostrarMensaje($"Error de conexión: {error.Message}", "danger", "bi-wifi-off");
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task<Usuario?> BuscarUsuarioPorEmail(string email)
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Usuario>>>(urlBaseApiUsuarios);
            var usuarios = respuesta?.Datos ?? new List<Usuario>();

            return usuarios.FirstOrDefault(u =>
            u.Email.Equals(email, StringComparison.OrdinalIgnoreCase));
        }
        catch
        {
            return null;
        }
    }

    private bool ValidarContrasenaReal(string contrasenaIngresada, string contrasenaUsuario)
    {
        // Validar contra la contraseña real del usuario
        // En un sistema real, aquí deberías usar hashing (BCrypt, etc.)
        return contrasenaIngresada == contrasenaUsuario;
    }

    private async Task IniciarSesionExitosa(string nombreUsuario, int usuarioId, bool esAdmin, string tipoUsuario = "User")
    {
        // Guardar información de sesión (simplificado)
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "usuario_logueado", nombreUsuario);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "usuario_id", usuarioId.ToString());
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "es_admin", esAdmin.ToString());
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "tipo_usuario", tipoUsuario);

        if (recordarme)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "recordar_email", modeloLogin.Email);
        }

        MostrarMensaje($"¡Bienvenido {nombreUsuario}! Redirigiendo al sistema...", "success", "bi-check-circle");

        // Simular delay de redirección
        await Task.Delay(2000);

        // Navegar al dashboard principal
        navegacion.NavigateTo("/dashboard", true);
    }

    // ==========================================
    // MÉTODOS AUXILIARES Y UI
    // ==========================================
    private async Task CargarUsuarios()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Usuario>>>(urlBaseApiUsuarios);
            usuariosDisponibles = (respuesta?.Datos ?? new List<Usuario>())
            .Where(u => u.Activo)
            .OrderBy(u => u.Email)
            .Take(20)
            .ToList();
        }
        catch (Exception)
        {
            usuariosDisponibles = new List<Usuario>();
        }
    }

    private async Task CargarUsuarioDemo()
    {
        if (usuariosDisponibles.Any())
        {
            var usuarioDemo = usuariosDisponibles.First();
            SeleccionarCredenciales(usuarioDemo.Email, usuarioDemo.Contrasena);
        }
        else
        {
            await CargarUsuarios();
            if (usuariosDisponibles.Any())
            {
                var usuarioDemo = usuariosDisponibles.First();
                SeleccionarCredenciales(usuarioDemo.Email, usuarioDemo.Contrasena);
            }
            else
            {
                MostrarMensaje("No se pudieron cargar usuarios de demo.", "info", "bi-info-circle");
            }
        }
    }

    private void SeleccionarCredenciales(string email, string contrasena)
    {
        modeloLogin.Email = email;
        modeloLogin.Contrasena = contrasena;
        mostrarUsuarios = false;
        mostrarAyuda = false;
        MostrarMensaje($"Credenciales seleccionadas: {email}", "info", "bi-check");
    }

    private void TogglePasswordVisibility()
    {
        mostrarPassword = !mostrarPassword;
    }

    private void MostrarAyuda()
    {
        mostrarAyuda = !mostrarAyuda;
        mostrarUsuarios = false;
    }

    private void VerificarParametrosURL()
    {
        var uri = new Uri(navegacion.Uri);
        if (uri.Query.Contains("expired"))
        {
            MostrarMensaje("Su sesión ha expirado. Por favor inicie sesión nuevamente.", "warning", "bi-clock");
        }
        else if (uri.Query.Contains("unauthorized"))
        {
            MostrarMensaje("Acceso no autorizado. Debe iniciar sesión para continuar.", "info", "bi-shield-exclamation");
        }
    }

    private void MostrarMensaje(string texto, string tipo, string icono = "")
    {
        mensaje = texto;
        iconoAlerta = string.IsNullOrEmpty(icono) ? "bi-info-circle" : icono;
        claseAlerta = $"alert alert-{tipo}";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAlerta = "";
        iconoAlerta = "";
    }

    // Métodos auxiliares para los botones
    private void SeleccionarAdmin()
    {
        // El admin debe estar registrado en la base de datos con email admin@sistema.com
        SeleccionarCredenciales("admin@sistema.com", "admin123");
    }

    private void SeleccionarUsuario(Usuario usuario)
    {
        SeleccionarCredenciales(usuario.Email, usuario.Contrasena);
    }
}
@*  
- @page "/actividades"
- Autor: Victor Oliveros
- Fecha: 10/2025
- Version: 1.0
- Descripción: Página para gestionar actividades vinculadas a entregables.
- Notas: Basada en la estructura de Archivos.razor

Documentación: Permite gestionar actividades con seguimiento de progreso y fechas.
*@

@page "/actividades"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq

@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Gestión de Actividades</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-check2-square me-2"></i>
            Gestión de Actividades
        </h5>

        <div class="mb-3 d-flex gap-2 items-center">
            <button type="button" class="btn btn-outline-primary" @onclick="CargarActividades">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todas
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="CargarEntregables">
                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Cargar Entregables
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        <h4>Formulario de Actividad</h4>
        <EditForm Model="@actividadActual" OnValidSubmit="GuardarSegunEstado" FormName="ActividadForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="actividadActual.Id" />
                    <div class="form-text">Solo para búsqueda</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Entregable *</label>
                    <InputSelect class="form-control" @bind-Value="actividadActual.IdEntregable">
                        <option value="0">-- Seleccione un entregable --</option>
                        @foreach (var entregable in listaEntregables)
                        {
                            <option value="@entregable.Id">@entregable.Titulo</option>
                        }
                    </InputSelect>
                    <div class="form-text">Entregable asociado</div>
                </div>

                <div class="col-md-6">
                    <label class="form-label">Título *</label>
                    <InputText class="form-control" @bind-Value="actividadActual.Titulo" />
                    <div class="form-text">Nombre de la actividad</div>
                </div>

                <div class="col-md-12">
                    <label class="form-label">Descripción</label>
                    <InputTextArea class="form-control" rows="3" @bind-Value="actividadActual.Descripcion" />
                    <div class="form-text">Descripción detallada de la actividad</div>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Inicio</label>
                    <InputDate class="form-control" @bind-Value="actividadActual.FechaInicio" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Fin Prevista</label>
                    <InputDate class="form-control" @bind-Value="actividadActual.FechaFinPrevista" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Modificación</label>
                    <InputDate class="form-control" @bind-Value="actividadActual.FechaModificacion" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Finalización</label>
                    <InputDate class="form-control" @bind-Value="actividadActual.FechaFinalizacion" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Prioridad</label>
                    <InputSelect class="form-control" @bind-Value="actividadActual.Prioridad">
                        <option value="">-- Seleccione prioridad --</option>
                        <option value="1">1 - Muy Baja</option>
                        <option value="2">2 - Baja</option>
                        <option value="3">3 - Media</option>
                        <option value="4">4 - Alta</option>
                        <option value="5">5 - Muy Alta</option>
                    </InputSelect>
                    <div class="form-text">Nivel de prioridad (1-5)</div>
                </div>

                <div class="col-md-6">
                    <label class="form-label">Porcentaje de Avance (%)</label>
                    <InputNumber class="form-control" @bind-Value="actividadActual.PorcentajeAvance" min="0"
                        max="100" />
                    <div class="form-text">Progreso de 0 a 100%</div>
                </div>
            </div>

            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> @textoBotonGuardar
                </button>
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorID">
                    <i class="bi bi-search" aria-hidden="true"></i> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarActividad"
                    disabled="@(!existeActividad)">
                    <i class="bi bi-pencil-square" aria-hidden="true"></i> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarActividad"
                    disabled="@(!existeActividad)">
                    <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                </button>
            </div>
        </EditForm>
        <hr />

        @if (cargando)
        {
            <p>Cargando actividades...</p>
        }
        else if (listaActividades.Count == 0)
        {
            <p>No hay actividades disponibles.</p>
        }
        else
        {
            <h4 class="mt-4">Lista de Actividades</h4>
            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Entregable</th>
                        <th>Título</th>
                        <th>Prioridad</th>
                        <th>Progreso</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var actividad in listaActividades)
                    {
                        <tr>
                            <td>@actividad.Id</td>
                            <td>
                                @{
                                    var entregableRelacionado = listaEntregables
                                    .FirstOrDefault(e => e.Id == actividad.IdEntregable);
                                }
                                @(entregableRelacionado?.Titulo ?? $"Entregable ID: {actividad.IdEntregable}")
                            </td>
                            <td>@actividad.Titulo</td>
                            <td>
                                @if (actividad.Prioridad.HasValue)
                                {
                                    <span class="badge @GetPrioridadBadgeClass(actividad.Prioridad.Value)">
                                        @GetPrioridadTexto(actividad.Prioridad.Value)
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">N/A</span>
                                }
                            </td>
                            <td>
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar @GetProgressBarClass(actividad.PorcentajeAvance ?? 0)"
                                        role="progressbar" style="width: @(actividad.PorcentajeAvance ?? 0)%">
                                        @(actividad.PorcentajeAvance ?? 0)%
                                    </div>
                                </div>
                            </td>
                            <td>
                                @if (actividad.FechaFinalizacion.HasValue)
                                {
                                    <span class="badge bg-success">Finalizada</span>
                                }
                                else if (actividad.FechaFinPrevista < DateTime.Now)
                                {
                                    <span class="badge bg-danger">Retrasada</span>
                                }
                                else
                                {
                                    <span class="badge bg-primary">En Progreso</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => CargarEnFormulario(actividad)">
                                    <i class="bi bi-pencil" aria-hidden="true"></i> Editar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<Actividad> listaActividades = new();
    private List<Entregable> listaEntregables = new();

    [SupplyParameterFromForm]
    private Actividad actividadActual { get; set; } = new();

    private bool existeActividad = false;
    private bool cargando = false;
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private string textoBotonGuardar = "Crear Actividad";

    private const string urlBaseApiActividades = "api/actividad";
    private const string urlBaseApiEntregables = "api/entregable";

    protected override async Task OnInitializedAsync()
    {
        await CargarEntregables();
        await CargarActividades();
        LimpiarMensajes();
    }

    private async Task CargarActividades()
    {
        LimpiarMensajes();
        try
        {
            cargando = true;
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Actividad>>>(urlBaseApiActividades);

            listaActividades = respuesta?.Datos ?? new List<Actividad>();
            mensaje = $"Se cargaron {listaActividades.Count} actividades.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar actividades: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarEntregables()
    {
        LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Entregable>>>(urlBaseApiEntregables);
            listaEntregables = respuesta?.Datos ?? new List<Entregable>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar entregables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task BuscarPorID()
    {
        LimpiarMensajes();
        if (actividadActual.Id <= 0)
        {
            mensaje = "Por favor ingrese un ID válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiActividades}/id/{actividadActual.Id}";
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Actividad>>>(url);
            var encontrada = respuesta?.Datos?.FirstOrDefault();

            if (encontrada != null)
            {
                actividadActual = new Actividad()
                {
                    Id = encontrada.Id,
                    IdEntregable = encontrada.IdEntregable,
                    Titulo = encontrada.Titulo,
                    Descripcion = encontrada.Descripcion,
                    FechaInicio = encontrada.FechaInicio,
                    FechaFinPrevista = encontrada.FechaFinPrevista,
                    FechaModificacion = encontrada.FechaModificacion,
                    FechaFinalizacion = encontrada.FechaFinalizacion,
                    Prioridad = encontrada.Prioridad,
                    PorcentajeAvance = encontrada.PorcentajeAvance
                };

                existeActividad = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Actividad encontrada y cargada en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Actividad no encontrada.";
                claseAviso = "alert alert-warning";
                existeActividad = false;
                textoBotonGuardar = "Crear";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar actividad: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        LimpiarMensajes();

        if (actividadActual.IdEntregable <= 0)
        {
            mensaje = "Debe seleccionar un entregable.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (string.IsNullOrWhiteSpace(actividadActual.Titulo))
        {
            mensaje = "El título de la actividad es requerido.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (existeActividad)
        {
            await ActualizarActividad();
        }
        else
        {
            await CrearActividad();
        }
    }

    private async Task CrearActividad()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            var actividadParaCrear = new
            {
                IdEntregable = actividadActual.IdEntregable,
                Titulo = actividadActual.Titulo,
                Descripcion = actividadActual.Descripcion,
                FechaInicio = actividadActual.FechaInicio,
                FechaFinPrevista = actividadActual.FechaFinPrevista,
                FechaModificacion = actividadActual.FechaModificacion,
                FechaFinalizacion = actividadActual.FechaFinalizacion,
                Prioridad = actividadActual.Prioridad,
                PorcentajeAvance = actividadActual.PorcentajeAvance
            };

            var respuesta = await httpClient.PostAsJsonAsync(urlBaseApiActividades, actividadParaCrear);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Actividad creada correctamente.";
                claseAviso = "alert alert-success";
                await CargarActividades();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear actividad: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear actividad: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarActividad()
    {
        LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            var actividadParaActualizar = new
            {
                IdEntregable = actividadActual.IdEntregable,
                Titulo = actividadActual.Titulo,
                Descripcion = actividadActual.Descripcion,
                FechaInicio = actividadActual.FechaInicio,
                FechaFinPrevista = actividadActual.FechaFinPrevista,
                FechaModificacion = actividadActual.FechaModificacion,
                FechaFinalizacion = actividadActual.FechaFinalizacion,
                Prioridad = actividadActual.Prioridad,
                PorcentajeAvance = actividadActual.PorcentajeAvance
            };

            var respuesta = await httpClient.PutAsJsonAsync($"{urlBaseApiActividades}/{actividadActual.Id}",
            actividadParaActualizar);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Actividad actualizada correctamente.";
                claseAviso = "alert alert-success";
                await CargarActividades();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar actividad: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar actividad: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarActividad()
    {
        LimpiarMensajes();
        if (actividadActual.Id <= 0)
        {
            mensaje = "ID de actividad inválido para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiActividades}/id/{actividadActual.Id}";
            var respuesta = await httpClient.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Actividad eliminada correctamente.";
                claseAviso = "alert alert-success";
                await CargarActividades();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al eliminar actividad: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar actividad: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Actividad actividad)
    {
        LimpiarMensajes();
        actividadActual = new Actividad
        {
            Id = actividad.Id,
            IdEntregable = actividad.IdEntregable,
            Titulo = actividad.Titulo,
            Descripcion = actividad.Descripcion,
            FechaInicio = actividad.FechaInicio,
            FechaFinPrevista = actividad.FechaFinPrevista,
            FechaModificacion = actividad.FechaModificacion,
            FechaFinalizacion = actividad.FechaFinalizacion,
            Prioridad = actividad.Prioridad,
            PorcentajeAvance = actividad.PorcentajeAvance
        };

        existeActividad = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Actividad cargada en formulario.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    private void LimpiarFormulario()
    {
        actividadActual = new Actividad();
        existeActividad = false;
        textoBotonGuardar = "Crear Actividad";
        LimpiarMensajes();
    }

    // Métodos para el styling de la UI
    private string GetPrioridadBadgeClass(int prioridad)
    {
        return prioridad switch
        {
            1 => "bg-secondary",
            2 => "bg-info",
            3 => "bg-warning",
            4 => "bg-orange",
            5 => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetPrioridadTexto(int prioridad)
    {
        return prioridad switch
        {
            1 => "Muy Baja",
            2 => "Baja",
            3 => "Media",
            4 => "Alta",
            5 => "Muy Alta",
            _ => "N/A"
        };
    }

    private string GetProgressBarClass(int porcentaje)
    {
        if (porcentaje < 25) return "bg-danger";
        if (porcentaje < 50) return "bg-warning";
        if (porcentaje < 75) return "bg-info";
        return "bg-success";
    }
}




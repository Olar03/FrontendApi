@*  
- @page "/distribucion-presupuestos"
- Autor: Victor Oliveros
- Fecha: 10/2025
- Version: 1.0
- Descripción: Página para gestionar distribución de presupuestos entre proyectos.
- Notas: Basada en la estructura de Responsables.razor

Documentación: Permite gestionar la distribución de presupuestos padre hacia proyectos hijo.
*@

@page "/distribucion-presupuestos"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.Linq

@inject IHttpClientFactory fabricaHttp
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Gestión de Distribución de Presupuestos</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-diagram-3 me-2"></i>
            Gestión de Distribución de Presupuestos
        </h5>

        <div class="mb-3 d-flex gap-2 items-center">
            <button type="button" class="btn btn-outline-primary" @onclick="CargarDistribuciones">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todas
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="CargarDatosIniciales">
                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Cargar Datos
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        <h4>Formulario de Distribución de Presupuesto</h4>
        <EditForm Model="@distribucionActual" OnValidSubmit="GuardarSegunEstado" FormName="DistribucionForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="distribucionActual.Id"
                        readonly="@(distribucionActual.Id > 0)" />
                    <div class="form-text">Solo para búsqueda</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Presupuesto Padre *</label>
                    <InputSelect class="form-select" @bind-Value="distribucionActual.IdPresupuestoPadre">
                        <option value="0">-- Seleccione un presupuesto --</option>
                        @foreach (var presupuesto in listaPresupuestos)
                        {
                            <option value="@presupuesto.Id">
                                Proyecto: @(ObtenerNombreProyecto(presupuesto.IdProyecto)) - $@presupuesto.MontoSolicitado
                            </option>
                        }
                    </InputSelect>
                    <div class="form-text">Seleccione el presupuesto padre</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Proyecto Hijo *</label>
                    <InputSelect class="form-select" @bind-Value="distribucionActual.IdProyectoHijo">
                        <option value="0">-- Seleccione un proyecto --</option>
                        @foreach (var proyecto in listaProyectos)
                        {
                            <option value="@proyecto.Id">@proyecto.Titulo</option>
                        }
                    </InputSelect>
                    <div class="form-text">Seleccione el proyecto hijo</div>
                </div>

                <div class="col-md-2">
                    <label class="form-label">Monto Asignado *</label>
                    <InputNumber class="form-control" @bind-Value="distribucionActual.MontoAsignado" step="0.01" />
                    <div class="form-text">Monto a distribuir</div>
                </div>
            </div>

            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> @textoBotonGuardar
                </button>
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorID">
                    <i class="bi bi-search" aria-hidden="true"></i> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarDistribucion"
                    disabled="@(!existeDistribucion)">
                    <i class="bi bi-pencil-square" aria-hidden="true"></i> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarDistribucion"
                    disabled="@(!existeDistribucion)">
                    <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                </button>
            </div>
        </EditForm>
        <hr />

        @if (cargando)
        {
            <p>Cargando distribuciones...</p>
        }
        else if (listaDistribuciones.Count == 0)
        {
            <p>No hay distribuciones de presupuesto disponibles.</p>
        }
        else
        {
            <h4 class="mt-4">Lista de Distribuciones de Presupuesto</h4>

            @* Tarjeta de resumen *@
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-primary">Total Distribuciones</h5>
                            <h3 class="text-primary">@listaDistribuciones.Count</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-success">Monto Total Distribuido</h5>
                            <h3 class="text-success">$@listaDistribuciones.Sum(d => d.MontoAsignado).ToString("N2")</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-info">Promedio por Distribución</h5>
                            <h3 class="text-info">
                                $@(listaDistribuciones.Count > 0 ? (listaDistribuciones.Sum(d => d.MontoAsignado) /
                                                            listaDistribuciones.Count).ToString("N2") : "0.00")
                            </h3>
                        </div>
                    </div>
                </div>
            </div>

            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Presupuesto Padre</th>
                        <th>Proyecto Hijo</th>
                        <th>Monto Asignado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var distribucion in listaDistribuciones)
                    {
                        <tr>
                            <td>@distribucion.Id</td>
                            <td>
                                @{
                                    var presupuestoRelacionado = listaPresupuestos
                                    .FirstOrDefault(p => p.Id == distribucion.IdPresupuestoPadre);
                                }
                                @if (presupuestoRelacionado != null)
                                {
                                    <span>Proyecto: @(ObtenerNombreProyecto(presupuestoRelacionado.IdProyecto))</span>
                        
                                    <br />
                                    <small class="text-muted">Monto: $@presupuestoRelacionado.MontoSolicitado</small>
                                }
                                else
                                {
                                    <span class="text-muted">Presupuesto ID: @distribucion.IdPresupuestoPadre</span>
                                }
                            </td>
                            <td>
                                @{
                                    var proyectoRelacionado = listaProyectos
                                    .FirstOrDefault(p => p.Id == distribucion.IdProyectoHijo);
                                }
                                @(proyectoRelacionado?.Titulo ?? $"Proyecto ID: {distribucion.IdProyectoHijo}")
                            </td>
                            <td>
                                <span class="badge bg-success fs-6">$@distribucion.MontoAsignado.ToString("N2")</span>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => CargarEnFormulario(distribucion)">
                                    <i class="bi bi-pencil" aria-hidden="true"></i> Editar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<DistribucionPresupuesto> listaDistribuciones = new();
    private List<Presupuesto> listaPresupuestos = new();
    private List<Proyecto> listaProyectos = new();

    [SupplyParameterFromForm]
    private DistribucionPresupuesto distribucionActual { get; set; } = new();

    private bool existeDistribucion = false;
    private bool cargando = false;
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private string textoBotonGuardar = "Crear Distribución";

    private const string urlBaseApiDistribuciones = "api/distribucionPresupuesto";
    private const string urlBaseApiPresupuestos = "api/presupuesto";
    private const string urlBaseApiProyectos = "api/proyecto";

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
        await CargarDistribuciones();
        LimpiarMensajes();
    }

    private async Task CargarDatosIniciales()
    {
        await CargarPresupuestos();
        await CargarProyectos();
        LimpiarMensajes();
    }

    private async Task CargarDistribuciones()
    {
        LimpiarMensajes();
        try
        {
            cargando = true;
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await
            httpClient.GetFromJsonAsync<RespuestaApi<List<DistribucionPresupuesto>>>(urlBaseApiDistribuciones);

            listaDistribuciones = respuesta?.Datos ?? new List<DistribucionPresupuesto>();
            mensaje = $"Se cargaron {listaDistribuciones.Count} distribuciones.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar distribuciones: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarPresupuestos()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Presupuesto>>>(urlBaseApiPresupuestos);
            listaPresupuestos = respuesta?.Datos ?? new List<Presupuesto>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar presupuestos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task CargarProyectos()
    {
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>(urlBaseApiProyectos);
            listaProyectos = respuesta?.Datos ?? new List<Proyecto>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar proyectos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private string ObtenerNombreProyecto(int idProyecto)
    {
        var proyecto = listaProyectos.FirstOrDefault(p => p.Id == idProyecto);
        return proyecto?.Titulo ?? $"Proyecto ID: {idProyecto}";
    }

    private async Task BuscarPorID()
    {
        LimpiarMensajes();
        if (distribucionActual.Id <= 0)
        {
            mensaje = "Por favor ingrese un ID válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiDistribuciones}/id/{distribucionActual.Id}";
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<DistribucionPresupuesto>>(url);

            if (respuesta?.Exito == true && respuesta.Datos != null)
            {
                distribucionActual = new DistribucionPresupuesto()
                {
                    Id = respuesta.Datos.Id,
                    IdPresupuestoPadre = respuesta.Datos.IdPresupuestoPadre,
                    IdProyectoHijo = respuesta.Datos.IdProyectoHijo,
                    MontoAsignado = respuesta.Datos.MontoAsignado
                };

                existeDistribucion = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Distribución encontrada y cargada en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Distribución no encontrada.";
                claseAviso = "alert alert-warning";
                existeDistribucion = false;
                textoBotonGuardar = "Crear";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar distribución: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        LimpiarMensajes();

        if (distribucionActual.IdPresupuestoPadre <= 0)
        {
            mensaje = "Debe seleccionar un presupuesto padre.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (distribucionActual.IdProyectoHijo <= 0)
        {
            mensaje = "Debe seleccionar un proyecto hijo.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (distribucionActual.MontoAsignado <= 0)
        {
            mensaje = "El monto asignado debe ser mayor a cero.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (existeDistribucion)
        {
            await ActualizarDistribucion();
        }
        else
        {
            await CrearDistribucion();
        }
    }

    private async Task CrearDistribucion()
    {
        LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.PostAsJsonAsync(urlBaseApiDistribuciones, distribucionActual);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Distribución creada correctamente.";
                claseAviso = "alert alert-success";
                await CargarDistribuciones();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear distribución: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear distribución: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarDistribucion()
    {
        LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.PutAsJsonAsync($"{urlBaseApiDistribuciones}/{distribucionActual.Id}",
            distribucionActual);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Distribución actualizada correctamente.";
                claseAviso = "alert alert-success";
                await CargarDistribuciones();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar distribución: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar distribución: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarDistribucion()
    {
        LimpiarMensajes();
        if (distribucionActual.Id <= 0)
        {
            mensaje = "ID de distribución inválido para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiDistribuciones}/id/{distribucionActual.Id}";
            var respuesta = await httpClient.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Distribución eliminada correctamente.";
                claseAviso = "alert alert-success";
                await CargarDistribuciones();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al eliminar distribución: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar distribución: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(DistribucionPresupuesto distribucion)
    {
        LimpiarMensajes();
        distribucionActual = new DistribucionPresupuesto
        {
            Id = distribucion.Id,
            IdPresupuestoPadre = distribucion.IdPresupuestoPadre,
            IdProyectoHijo = distribucion.IdProyectoHijo,
            MontoAsignado = distribucion.MontoAsignado
        };

        existeDistribucion = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Distribución cargada en formulario.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    private void LimpiarFormulario()
    {
        distribucionActual = new DistribucionPresupuesto();
        existeDistribucion = false;
        textoBotonGuardar = "Crear Distribución";
        LimpiarMensajes();
    }
}
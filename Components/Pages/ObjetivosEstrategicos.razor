@*
    -Pagina de Objetivos Estratégicos
    -Autor: Victor Oliveros
    -Fecha: 10/2025
    -Version: 1.0
    -Descripcion: Pagina que muestra una lista de objetivos estratégicos y permite modificaciones de acuerdo a un CRUD obtenidas de una API REST.
    
    DOCUMENTACIÓN:
    Esta página maneja entidades con CLAVES FORÁNEAS (foreign keys), lo que significa que cada objetivo
    está relacionado con una Variable Estratégica existente. 
*@
@page "/objetivos-estrategicos"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Objetivos Estratégicos</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-bullseye"></i>
            Gestión de Objetivos Estratégicos
        </h5>

        @* 
        EXPLICACIÓN: Barra de acciones principales
        Esta sección proporciona botones para las operaciones más comunes que el usuario realizará
        *@
        <div class="mb-3 d-flex gap-2">
            
            <button type="button" class="btn btn-outline-primary" @onclick="CargarObjetivosEstrategicos">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todos
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="CargarVariablesEstrategicas">
                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Cargar Variables
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @* 
        EXPLICACIÓN: Área de mensajes
        Esta div muestra mensajes de retroalimentación al usuario (éxito, error, advertencia)
        La clase CSS se asigna dinámicamente según el tipo de mensaje
        *@
        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        @* 
        EXPLICACIÓN: Formulario principal
        EditForm es un componente de Blazor que proporciona validación automática
        y manejo de envío de formularios. El atributo Model vincula el formulario
        a nuestro objeto 'objetivoEstrategicoActual'
        *@
        <h4>Formulario de Objetivo Estratégico</h4>

        <EditForm Model="objetivoEstrategicoActual" OnValidSubmit="GuardarSegunEstado"
            FormName="ObjetivoEstrategicoForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                @* 
                EXPLICACIÓN: Campo ID - Solo lectura para búsqueda
                Este campo permite al usuario ingresar un ID para buscar un objetivo existente
                No se usa para crear nuevos registros (autoincrement)
                *@
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="objetivoEstrategicoActual.Id" />
                    <div class="form-text">Solo para búsqueda</div>
                </div>

                @* 
                EXPLICACIÓN: Campo de Clave Foránea - CONCEPTO IMPORTANTE
                Este es un InputSelect que permite al usuario elegir una Variable Estratégica existente.
                La propiedad @bind-Value se vincula a IdVariable (la clave foránea).
                Las opciones se llenan desde listaVariablesEstrategicas que cargamos de la API.
                *@
                <div class="col-md-3">
                    <label class="form-label">Variable Estratégica *</label>
                    <InputSelect class="form-control" @bind-Value="objetivoEstrategicoActual.IdVariable">
                        <option value="0">-- Seleccione una Variable --</option>
                        @* 
                        BUCLE FOREACH: Recorre cada variable estratégica disponible
                        y crea una opción en el select con su ID como valor y su título como texto
                        *@
                        @foreach (var variable in listaVariablesEstrategicas)
                        {
                            <option value="@variable.Id">@variable.Titulo</option>
                        }
                    </InputSelect>
                    <div class="form-text">Requerido: Seleccione la variable estratégica asociada</div>
                </div>

                @* 
                EXPLICACIÓN: Campos de texto estándar
                Estos campos funcionan igual que en otras páginas CRUD, 
                vinculándose directamente a las propiedades del modelo
                *@
                <div class="col-md-4">
                    <label class="form-label">Título *</label>
                    <InputText class="form-control" @bind-Value="objetivoEstrategicoActual.Titulo" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Descripción</label>
                    <InputText class="form-control" @bind-Value="objetivoEstrategicoActual.Descripcion" />
                </div>
            </div>

            @* 
            EXPLICACIÓN: Botones de acción del formulario
            Cada botón tiene una función específica y algunos se deshabilitan dinámicamente
            según el estado actual (si existe o no un objetivo cargado)
            *@
            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> @textoBotonGuardar
                </button>
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">
                    <i class="bi bi-search" aria-hidden="true"></i> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarObjetivoEstrategico"
                    disabled="@(!existeObjetivoEstrategico)">
                    <i class="bi bi-pencil-square" aria-hidden="true"></i> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarObjetivoEstrategico"
                    disabled="@(!existeObjetivoEstrategico)">
                    <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                </button>
            </div>
        </EditForm>

        <hr />

        @* 
        EXPLICACIÓN: Tabla de datos con información relacionada
        Esta tabla muestra no solo los datos del objetivo, sino también
        información de la Variable Estratégica relacionada (usando la navegación)
        *@
        @if (cargando)
        {
            <p><em>Cargando objetivos estratégicos...</em></p>
        }
        else if (listaObjetivosEstrategicos.Count == 0)
        {
            <p>No hay objetivos estratégicos registrados.</p>
        }
        else
        {
            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Variable Estratégica</th>
                        <th>Título</th>
                        <th>Descripción</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @* 
                    EXPLICACIÓN: Renderizado de datos relacionados
                    Observa cómo accedemos a objetivo.VariableEstrategica?.Titulo
                    Esto utiliza la propiedad de navegación para mostrar el título
                    de la variable relacionada en lugar del ID numérico
                    *@
                    @foreach (var objetivo in listaObjetivosEstrategicos)
                    {
                        <tr>
                            <td>@objetivo.Id</td>
                            <td>
                                @* 
                                EXPLICACIÓN: Buscamos el título de la variable en nuestra lista cargada
                                Si no la encontramos, mostramos el ID como fallback
                                *@
                                @{
                                    var variableRelacionada = listaVariablesEstrategicas
                                    .FirstOrDefault(v => v.Id == objetivo.IdVariable);
                                }
                                @(variableRelacionada?.Titulo ?? $"Variable ID: {objetivo.IdVariable}")
                            </td>
                            <td>@objetivo.Titulo</td>
                            <td>@objetivo.Descripcion</td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => CargarEnFormulario(objetivo)">
                                    <i class="bi bi-cloud-arrow-up" aria-hidden="true"></i> Cargar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    // ==========================================
    // EXPLICACIÓN: VARIABLES DE ESTADO
    // ==========================================

    /*
    CONCEPTO: Variables de estado del componente
    Estas variables mantienen el estado actual de la página:
    - Listas para datos de la API
    - Objeto actual para el formulario
    - Variables de control de UI
    */

    // Lista principal de objetivos estratégicos
    private List<ObjetivoEstrategico> listaObjetivosEstrategicos = new();

    // IMPORTANTE: Lista de variables estratégicas para el dropdown
    // Esta lista se usa para poblar el InputSelect de variables
    private List<VariableEstrategica> listaVariablesEstrategicas = new();

    // Objeto vinculado al formulario - representa el objetivo que se está editando/creando
    [SupplyParameterFromForm]
    private ObjetivoEstrategico objetivoEstrategicoActual { get; set; } = new();

    // Variables de control de estado de la UI
    private bool existeObjetivoEstrategico = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    // Constantes para las URLs de las APIs
    private const string urlBaseApiObjetivos = "api/objetivoestrategico";
    private const string urlBaseApiVariables = "api/variableestrategica";

    // ==========================================
    // EXPLICACIÓN: CICLO DE VIDA DEL COMPONENTE
    // ==========================================

    /*
    CONCEPTO: OnInitializedAsync
    Este método se ejecuta automáticamente cuando el componente se carga por primera vez.
    Es el lugar ideal para cargar datos iniciales que la página necesita para funcionar.
    */
    protected override async Task OnInitializedAsync()
    {
        // ORDEN IMPORTANTE: Primero cargamos las variables estratégicas
        // porque las necesitamos para el dropdown del formulario
        await CargarVariablesEstrategicas();

        // Luego cargamos los objetivos estratégicos
        await CargarObjetivosEstrategicos();
        LimpiarMensajes();
    }

    // ==========================================
    // EXPLICACIÓN: MÉTODOS CRUD PRINCIPALES
    // ==========================================

    /// <summary>
    /// MÉTODO: Carga todas las variables estratégicas para el dropdown
    /// PROPÓSITO: Llenar el InputSelect con las opciones disponibles
    /// HTTP GET /api/variableestrategica
    /// </summary>
    private async Task CargarVariablesEstrategicas()
    {
        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await http.GetFromJsonAsync<RespuestaApi<List<VariableEstrategica>>>(urlBaseApiVariables);

            // PATRÓN NULL-COALESCING: Si respuesta?.Datos es null, usa lista vacía
            listaVariablesEstrategicas = respuesta?.Datos ?? new List<VariableEstrategica>();

            // LOGGING/FEEDBACK: Informamos al usuario sobre la operación
            mensaje = $"Se cargaron {listaVariablesEstrategicas.Count} variables estratégicas para selección.";
            claseAviso = "alert alert-info";
        }
        catch (Exception error)
        {
            // MANEJO DE ERRORES: Siempre capturamos excepciones y las mostramos al usuario
            mensaje = $"Error al cargar variables estratégicas: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// MÉTODO: Carga todos los objetivos estratégicos con sus relaciones
    /// PROPÓSITO: Poblar la tabla principal de datos
    /// HTTP GET /api/objetivoestrategico
    ///
    /// NOTA TÉCNICA: Este método carga solo los objetivos estratégicos sin las propiedades
    /// de navegación (VariableEstrategica). Para mostrar los títulos de las variables,
    /// utilizamos la lista de variables ya cargada y hacemos una búsqueda local por IdVariable.
    /// </summary>
    private async Task CargarObjetivosEstrategicos()
    {
        try
        {
            cargando = true; // Activamos indicador de carga para UX
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await http.GetFromJsonAsync<RespuestaApi<List<ObjetivoEstrategico>>>(urlBaseApiObjetivos);

            // PATRÓN NULL-COALESCING: Si respuesta?.Datos es null, usa lista vacía
            listaObjetivosEstrategicos = respuesta?.Datos ?? new List<ObjetivoEstrategico>();

            mensaje = $"Se cargaron {listaObjetivosEstrategicos.Count} objetivos estratégicos.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar objetivos estratégicos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false; // Siempre desactivamos el indicador de carga
        }
    }

    /// <summary>
    /// MÉTODO: Busca un objetivo específico por ID
    /// CONCEPTO: Búsqueda individual con manejo de relaciones
    /// HTTP GET /api/objetivoestrategico/id/{id}
    /// </summary>
    private async Task BuscarPorId()
    {
        LimpiarMensajes();

        // VALIDACIÓN: Verificamos que el ID sea válido antes de hacer la petición
        if (objetivoEstrategicoActual.Id <= 0)
        {
            mensaje = "Por favor, ingrese un ID válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiObjetivos}/id/{objetivoEstrategicoActual.Id}";
            var respuesta = await http.GetFromJsonAsync<RespuestaApi<List<ObjetivoEstrategico>>>(url);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado != null)
            {
                /*
                IMPORTANTE: Creación de nueva instancia
                Creamos un nuevo objeto en lugar de asignar directamente
                para evitar problemas de referencia con el binding
                */
                objetivoEstrategicoActual = new ObjetivoEstrategico
                {
                    Id = encontrado.Id,
                    IdVariable = encontrado.IdVariable, // CLAVE FORÁNEA
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion
                };

                // Actualizamos el estado del formulario
                existeObjetivoEstrategico = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Objetivo estratégico encontrado.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Objetivo estratégico no encontrado.";
                claseAviso = "alert alert-warning";
                existeObjetivoEstrategico = false;
                textoBotonGuardar = "Crear";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// MÉTODO: Determina si crear o actualizar según el estado actual
    /// PATRÓN: Strategy pattern simplificado
    /// </summary>
    private async Task GuardarSegunEstado()
    {
        // VALIDACIÓN DE CLAVE FORÁNEA: Verificamos que se haya seleccionado una variable
        if (objetivoEstrategicoActual.IdVariable <= 0)
        {
            mensaje = "Debe seleccionar una Variable Estratégica válida.";
            claseAviso = "alert alert-warning";
            return;
        }

        // LÓGICA CONDICIONAL: Decide qué operación realizar
        if (existeObjetivoEstrategico)
            await ActualizarObjetivoEstrategico();
        else
            await CrearObjetivoEstrategico();
    }

    /// <summary>
    /// MÉTODO: Crea un nuevo objetivo estratégico
    /// IMPORTANTE: Maneja la clave foránea en la creación
    /// HTTP POST /api/objetivoestrategico
    /// </summary>
    private async Task CrearObjetivoEstrategico()
    {
        LimpiarMensajes();

        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");

            /*
            OBJETO ANÓNIMO PARA CREACIÓN:
            Enviamos solo los datos necesarios, excluyendo el ID (autoincrement)
            pero INCLUYENDO la clave foránea IdVariable
            */
            var objetivoParaCrear = new
            {
                IdVariable = objetivoEstrategicoActual.IdVariable, // CLAVE FORÁNEA REQUERIDA
                Titulo = objetivoEstrategicoActual.Titulo,
                Descripcion = objetivoEstrategicoActual.Descripcion
            };

            var respuesta = await http.PostAsJsonAsync(urlBaseApiObjetivos, objetivoParaCrear);

            if (respuesta.IsSuccessStatusCode)
            {
                var objetivoCreado = await respuesta.Content.ReadFromJsonAsync<ObjetivoEstrategico>();
                if (objetivoCreado != null)
                {
                    mensaje = $"Objetivo estratégico creado con éxito. ID asignado: {objetivoCreado.Id}";
                    claseAviso = "alert alert-success";

                    // REFRESCAR DATOS: Recargamos para mostrar los cambios
                    await CargarObjetivosEstrategicos();
                    LimpiarFormulario();
                }
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el objetivo estratégico: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// MÉTODO: Actualiza un objetivo estratégico existente
    /// INCLUYE: Manejo de clave foránea en actualizaciones
    /// HTTP PUT /api/objetivoestrategico/id/{id}
    /// </summary>
    private async Task ActualizarObjetivoEstrategico()
    {
        LimpiarMensajes();

        if (objetivoEstrategicoActual.Id <= 0)
        {
            mensaje = "Debe buscar un objetivo estratégico válido antes de actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiObjetivos}/id/{objetivoEstrategicoActual.Id}";

            /*
            OBJETO PARA ACTUALIZACIÓN:
            Incluimos todos los campos que pueden cambiar,
            incluyendo la clave foránea IdVariable
            */
            var objetivoParaActualizar = new
            {
                IdVariable = objetivoEstrategicoActual.IdVariable, // Puede cambiar la relación
                Titulo = objetivoEstrategicoActual.Titulo,
                Descripcion = objetivoEstrategicoActual.Descripcion
            };

            var respuesta = await http.PutAsJsonAsync(url, objetivoParaActualizar);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = $"Objetivo estratégico con ID {objetivoEstrategicoActual.Id} actualizado con éxito.";
                claseAviso = "alert alert-success";
                await CargarObjetivosEstrategicos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar objetivo estratégico: {respuesta.StatusCode} - {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// MÉTODO: Elimina un objetivo estratégico
    /// IMPORTANTE: Considera las relaciones al eliminar
    /// HTTP DELETE /api/objetivoestrategico/id/{id}
    /// </summary>
    private async Task EliminarObjetivoEstrategico()
    {
        LimpiarMensajes();

        if (objetivoEstrategicoActual.Id <= 0)
        {
            mensaje = "Debe buscar un objetivo estratégico primero para poder eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiObjetivos}/id/{objetivoEstrategicoActual.Id}";
            var respuesta = await http.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Objetivo estratégico eliminado con éxito.";
                claseAviso = "alert alert-success";
                await CargarObjetivosEstrategicos();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el objetivo estratégico: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // ==========================================
    // EXPLICACIÓN: MÉTODOS AUXILIARES
    // ==========================================

    /// <summary>
    /// MÉTODO: Prueba la conectividad con la API
    /// PROPÓSITO: Diagnóstico de problemas de conexión
    /// </summary>
    private async Task ProbarConexion()
    {
        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await http.GetAsync(urlBaseApiObjetivos);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión exitosa con la API.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"Error de conexión: {respuesta.StatusCode}";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// MÉTODO: Carga datos de un objetivo en el formulario para edición
    /// PATRÓN: Data Transfer - del display al formulario
    /// </summary>
    private void CargarEnFormulario(ObjetivoEstrategico objetivo)
    {
        /*
        IMPORTANTE: Creación de nueva instancia
        Evitamos modificar directamente el objeto de la lista
        para prevenir efectos secundarios no deseados
        */
        objetivoEstrategicoActual = new ObjetivoEstrategico
        {
            Id = objetivo.Id,
            IdVariable = objetivo.IdVariable, // CLAVE FORÁNEA
            Titulo = objetivo.Titulo,
            Descripcion = objetivo.Descripcion
        };

        // Actualizamos el estado del formulario
        existeObjetivoEstrategico = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Objetivo estratégico cargado en el formulario.";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// MÉTODO: Limpia mensajes de estado
    /// PROPÓSITO: Mantener limpia la interfaz entre operaciones
    /// </summary>
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    /// <summary>
    /// MÉTODO: Reinicia el formulario a su estado inicial
    /// IMPORTANTE: Resetea también el estado de clave foránea
    /// </summary>
    private void LimpiarFormulario()
    {
        /*
        RESET COMPLETO:
        Creamos una nueva instancia para asegurar que todos los valores
        vuelvan a sus valores por defecto, incluyendo IdVariable = 0
        */
        objetivoEstrategicoActual = new ObjetivoEstrategico();
        existeObjetivoEstrategico = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}


@*
    -Pagina de Variables Estratégicas
    -Autor: Victor Oliveros
    -Fecha: 10/2025
    -Version: 1.0
    -Descripcion: Pagina que muestra una lista de variables estratégicas y permite modificaciones de acuerdo a un CRUD obtenidas de una API REST.
*@
@page "/variables-estrategicas"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Variables Estratégicas</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
        <i class="bi bi-graph-up-arrow"></i>
            Gestión de variables Estratégicas
        </h5>

        @* Barra de acciones principales *@
        <div class="mb-3 d-flex gap-2">
            @* Botones para acciones generales *@
            <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">
                <i class="bi bi-wifi aria-hidden="true"></i> Probar conexión
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="CargarVariablesEstrategicas">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todos
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @* Área de mensajes para retroalimentación al usuario *@
        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        @* Formulario para crear/editar variables estratégicas *@
        <h4>Formulario de Variable Estratégica</h4>

        <EditForm Model="variableEstrategicaActual" OnValidSubmit="GuardarSegunEstado"
            FormName="VariableEstrategicaForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @* Campos del formulario *@
            <div class="row g-3">
                @* Campo Id - Solo para búsqueda *@
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="variableEstrategicaActual.Id" />
                    <div class="form-text">Solo para búsqueda</div>
                </div>

                @* Campo Título *@
                <div class="col-md-5">
                    <label class="form-label">Título</label>
                    <InputText class="form-control" @bind-Value="variableEstrategicaActual.Titulo" />
                </div>

                @* Campo Descripción *@
                <div class="col-md-5">
                    <label class="form-label">Descripción</label>
                    <InputText class="form-control" @bind-Value="variableEstrategicaActual.Descripcion" />
                </div>
            </div>

            @* Botones de acción del formulario *@
            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                     <i class="bi bi-plus-circle" aria-hidden="true"></i> @textoBotonGuardar
                </button>
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">
                     <i class="bi bi-search" aria-hidden="true"></i>> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarVariableEstrategica"
                    disabled="@(!existeVariableEstrategica)">
                    <i class="bi bi-pencil-square" aria-hidden="true" ></i> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarVariableEstrategica"
                    disabled="@(!existeVariableEstrategica)">
                    <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                </button>
            </div>
        </EditForm>

        <hr />

        @* Tabla de variables estratégicas *@
        @if (cargando)
        {
            <p><em>Cargando variables estratégicas...</em></p>
        }
        else if (listaVariablesEstrategicas.Count == 0)
        {
            <p>No hay variables estratégicas registradas.</p>
        }
        else
        {
            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Título</th>
                        <th>Descripción</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var variableEstrategica in listaVariablesEstrategicas)
                    {
                        <tr>
                            <td>@variableEstrategica.Id</td>
                            <td>@variableEstrategica.Titulo</td>
                            <td>@variableEstrategica.Descripcion</td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => CargarEnFormulario(variableEstrategica)">
                                    <i class="bi bi-cloud-arrow-up" aria-hidden="true"></i> Cargar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>

@code {
    // ==========================================
    // VARIABLES DE ESTADO
    // ==========================================

    // Lista para almacenar todas las variables estratégicas
    private List<VariableEstrategica> listaVariablesEstrategicas = new();

    // Objeto para manejar la variable estratégica actual en el formulario
    [SupplyParameterFromForm]
    private VariableEstrategica variableEstrategicaActual { get; set; } = new();

    // Variables de control de estado
    private bool existeVariableEstrategica = false;
    private string textoBotonGuardar = "Crear";
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private bool cargando = false;

    // URL base para la API
    private const string urlBaseApi = "api/variableestrategica";

    // ==========================================
    // CICLO DE VIDA DEL COMPONENTE
    // ==========================================

    protected override async Task OnInitializedAsync()
    {
        await CargarVariablesEstrategicas();
    }

    // ==========================================
    // MÉTODOS CRUD
    // ==========================================

    /// <summary>
    /// Obtiene la lista completa de variables estratégicas desde la API
    /// HTTP GET /api/variableestrategica
    /// </summary>
    private async Task CargarVariablesEstrategicas()
    {
        try
        {
            cargando = true;
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await http.GetFromJsonAsync<RespuestaApi<List<VariableEstrategica>>>(urlBaseApi);

            listaVariablesEstrategicas = respuesta?.Datos ?? new List<VariableEstrategica>();

            mensaje = $"Se cargaron {listaVariablesEstrategicas.Count} variables estratégicas.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar variables estratégicas: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    /// <summary>
    /// Busca una variable estratégica específica por su ID
    /// HTTP GET /api/variableestrategica/id/{id}
    /// </summary>
    private async Task BuscarPorId()
    {
        LimpiarMensajes();

        if (variableEstrategicaActual.Id == null || variableEstrategicaActual.Id <= 0)
        {
            mensaje = "Por favor, ingrese un ID válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApi}/id/{variableEstrategicaActual.Id}";
            var respuesta = await http.GetFromJsonAsync<RespuestaApi<List<VariableEstrategica>>>(url);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado != null)
            {
                variableEstrategicaActual = new VariableEstrategica
                {
                    Id = encontrado.Id,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion
                };
                existeVariableEstrategica = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Variable estratégica encontrada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Variable estratégica no encontrada.";
                claseAviso = "alert alert-warning";
                existeVariableEstrategica = false;
                textoBotonGuardar = "Crear";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Decide si crear o actualizar según el estado
    /// </summary>
    private async Task GuardarSegunEstado()
    {
        if (existeVariableEstrategica)
            await ActualizarVariableEstrategica();
        else
            await CrearVariableEstrategica();
    }

    /// <summary>
    /// Crea una nueva variable estratégica en la base de datos
    /// IMPORTANTE: No envía el ID porque es autoincrement en la BD
    /// HTTP POST /api/variableestrategica
    /// </summary>
    private async Task CrearVariableEstrategica()
    {
        LimpiarMensajes();

        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");

            var variableEstrategicaParaCrear = new
            {
                Titulo = variableEstrategicaActual.Titulo,
                Descripcion = variableEstrategicaActual.Descripcion
            };

            var respuesta = await http.PostAsJsonAsync(urlBaseApi, variableEstrategicaParaCrear);

            if (respuesta.IsSuccessStatusCode)
            {
                var variableEstrategicaCreada = await respuesta.Content.ReadFromJsonAsync<VariableEstrategica>();
                if (variableEstrategicaCreada != null)
                {
                    mensaje = $"Variable estratégica creada con éxito. ID asignado: {variableEstrategicaCreada.Id}";
                    claseAviso = "alert alert-success";
                    await CargarVariablesEstrategicas();
                    LimpiarFormulario();
                }
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear la variable estratégica: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Actualiza una variable estratégica existente en la base de datos
    /// IMPORTANTE: No modifica el ID ya que es autoincrement y asignado por la BD
    /// HTTP PUT /api/variableestrategica/id/{id}
    /// </summary>
    private async Task ActualizarVariableEstrategica()
    {
        LimpiarMensajes();

        if (variableEstrategicaActual.Id == null || variableEstrategicaActual.Id <= 0)
        {
            mensaje = "Debe buscar una variable estratégica válida antes de actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApi}/id/{variableEstrategicaActual.Id}";

            var variableEstrategicaParaActualizar = new
            {
                Titulo = variableEstrategicaActual.Titulo,
                Descripcion = variableEstrategicaActual.Descripcion
            };

            var respuesta = await http.PutAsJsonAsync(url, variableEstrategicaParaActualizar);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = $"Variable estratégica con ID {variableEstrategicaActual.Id} actualizada con éxito.";
                claseAviso = "alert alert-success";
                await CargarVariablesEstrategicas();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar variable estratégica: {respuesta.StatusCode} - {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Elimina una variable estratégica existente
    /// HTTP DELETE /api/variableestrategica/id/{id}
    /// </summary>
    private async Task EliminarVariableEstrategica()
    {
        LimpiarMensajes();

        if (variableEstrategicaActual.Id == null || variableEstrategicaActual.Id <= 0)
        {
            mensaje = "Debe buscar una variable estratégica primero para poder eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApi}/id/{variableEstrategicaActual.Id}";
            var respuesta = await http.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Variable estratégica eliminada con éxito.";
                claseAviso = "alert alert-success";
                await CargarVariablesEstrategicas();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar la variable estratégica: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // ==========================================
    // MÉTODOS AUXILIARES
    // ==========================================

    /// <summary>
    /// Prueba la conexión con la API
    /// </summary>
    private async Task ProbarConexion()
    {
        try
        {
            using var http = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await http.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión exitosa con la API.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"Error de conexión: {respuesta.StatusCode}";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Carga los datos de una variable estratégica en el formulario
    /// </summary>
    private void CargarEnFormulario(VariableEstrategica ve)
    {
        variableEstrategicaActual = new VariableEstrategica
        {
            Id = ve.Id,
            Titulo = ve.Titulo,
            Descripcion = ve.Descripcion
        };

        existeVariableEstrategica = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Variable estratégica cargada en el formulario.";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Limpia los mensajes de estado
    /// </summary>
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    /// <summary>
    /// Reinicia el formulario a su estado inicial
    /// </summary>
    private void LimpiarFormulario()
    {
        variableEstrategicaActual = new VariableEstrategica();
        existeVariableEstrategica = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}

<style>

.table-blue {
  background: #f8fbff;
}

.table-blue th {
  background: linear-gradient(90deg, #007bff, #00bfff);
  color: #fff;
  font-weight: 600;
  letter-spacing: 0.05em;
  border-bottom: 2px solid #1260a8;
}

.table-blue tbody tr {
  background-color: #fff;
}

.table-blue tbody tr:nth-child(even) {
  background-color: #e8f1fb;
}

.table-blue tbody tr:hover {
  background-color: #d3e4fa;
}

.table-blue td, .table-blue th {
  border-color: #d0e3fa !important;
}

.table-blue td {
  color: #19507e;
}
</style>
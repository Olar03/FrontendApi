@page "/productos"

@* 
    DIRECTIVAS DE BLAZOR:
    - @page: Define la ruta URL para acceder a este componente
    - @using: Importa namespaces para usar clases sin escribir el namespace completo
    - @inject: Inyecta servicios registrados en el contenedor de dependencias
    - @rendermode: CRÍTICO - Hace que el componente sea interactivo desde el inicio,
                   sin esto, los botones no funcionan debido al prerendering
*@

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Productos</PageTitle>

<h3>Gestión de Productos</h3>

@* ------------- BARRA DE ACCIONES GENERALES ------------- 
    Botones que no están relacionados con el formulario específico
*@
<div class="mb-3 d-flex gap-2">
    @* type="button" evita que estos botones hagan submit del formulario *@
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">
        <span class="oi oi-wifi" aria-hidden="true"></span> Probar conexión
    </button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarProductos">
        <span class="oi oi-reload" aria-hidden="true"></span> Mostrar todos
    </button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
        <span class="oi oi-x" aria-hidden="true"></span> Limpiar
    </button>
</div>

@* ------------- MENSAJES DE ESTADO ------------- 
    Muestra mensajes de éxito, error o información al usuario
    Se usa renderizado condicional (@if) para mostrar solo cuando hay mensaje
*@
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    @* La clase CSS viene de la variable claseAviso que cambia según el tipo de mensaje *@
    <div class="@claseAviso" role="alert">@mensaje</div>
}

@* ------------- FORMULARIO CRUD ------------- 
    EditForm: Componente de Blazor para formularios con validación
    - Model: El objeto que se vincula al formulario
    - OnValidSubmit: Método que se ejecuta cuando el formulario es válido y se envía
    - FormName: CRÍTICO - Requerido en Blazor Server para identificar formularios únicos
*@
<h4>Formulario de Producto</h4>

<EditForm Model="productoActual" OnValidSubmit="GuardarSegunEstado" FormName="ProductoForm">
    @* Componentes de validación automática *@
    <DataAnnotationsValidator /> @* Habilita validación basada en atributos *@
    <ValidationSummary /> @* Muestra resumen de errores de validación *@

    @* Grid responsivo de Bootstrap para organizar los campos *@
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">Código</label>
            @* 
                InputText: Componente de Blazor para campos de texto
                @bind-Value: Vinculación bidireccional (two-way binding)
                - Cuando el usuario escribe, actualiza productoActual.Codigo
                - Cuando el código cambia por programa, actualiza el campo visual
            *@
            <InputText class="form-control" @bind-Value="productoActual.Codigo" />
        </div>

        <div class="col-md-5">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="productoActual.Nombre" />
        </div>

        <div class="col-md-2">
            <label class="form-label">Stock</label>
            @* InputNumber: Para campos numéricos, maneja la conversión automáticamente *@
            <InputNumber class="form-control" @bind-Value="productoActual.Stock" />
        </div>

        <div class="col-md-2">
            <label class="form-label">Valor unitario</label>
            <InputNumber class="form-control" @bind-Value="productoActual.ValorUnitario" />
        </div>
    </div>

    <div class="mt-3 d-flex flex-wrap gap-2">
        @* 
            type="submit": Este botón envía el formulario y ejecuta OnValidSubmit
            El texto cambia dinámicamente entre "Crear" y "Actualizar"
        *@
        <button type="submit" class="btn btn-primary">
            <span class="oi oi-check" aria-hidden="true"></span> @textoBotonGuardar
        </button>

        @* 
            type="button": Botones que NO envían el formulario
            @onclick: Especifica el método C# que se ejecuta al hacer clic
            disabled: Atributo dinámico que habilita/deshabilita según condiciones
        *@
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">
            <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Buscar
        </button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarProducto" disabled="@(!existeProducto)">
            <span class="oi oi-pencil" aria-hidden="true"></span> Actualizar
        </button>
        <button type="button" class="btn btn-danger" @onclick="EliminarProducto" disabled="@(!existeProducto)">
            <span class="oi oi-trash" aria-hidden="true"></span> Eliminar
        </button>
    </div>
</EditForm>

<hr />

@* ------------- LISTADO (READ/LIST) ------------- 
    Muestra los productos en una tabla con renderizado condicional
*@

@* Renderizado condicional: muestra diferentes contenidos según el estado *@
@if (cargando)
{
    <p><em>Cargando productos...</em></p>
}
else if (listaProductos.Count == 0)
{
    <p>No hay productos disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Stock</th>
                <th>Valor unitario</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @* 
                @foreach: Itera sobre la lista y genera HTML para cada elemento
                Cada producto (p) se renderiza como una fila
            *@
            @foreach (var p in listaProductos)
            {
                <tr>
                    @* @ permite usar variables C# dentro de HTML *@
                    <td>@p.Codigo</td>
                    <td>@p.Nombre</td>
                    <td>@p.Stock</td>
                    <td>@p.ValorUnitario</td>
                    <td>
                        @* 
                            @(() => método(parámetro)): Lambda expression para pasar parámetros
                            Cada botón "sabe" qué producto cargar en el formulario
                        *@
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="@(() => CargarEnFormulario(p))">
                            <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // =============================================================================
    // VARIABLES DE ESTADO DEL COMPONENTE
    // =============================================================================

    // Lista que contiene todos los productos para mostrar en la tabla
    private List<Producto> listaProductos = new();

    // CRÍTICO: [SupplyParameterFromForm]
    // Este atributo le dice a Blazor que esta propiedad se llena desde el formulario
    // Sin esto, el formulario no funciona correctamente en Blazor Server
    [SupplyParameterFromForm]
    private Producto productoActual { get; set; } = new();

    // Bandera que indica si el producto en el formulario ya existe en la base de datos
    // Determina si el botón principal dice "Crear" o "Actualizar"
    private bool existeProducto = false;

    // Texto dinámico del botón principal
    private string textoBotonGuardar = "Crear";

    // Variables para mostrar mensajes al usuario
    private string mensaje = "";
    private string claseAviso = "alert alert-info"; // Clase CSS Bootstrap para el tipo de mensaje

    // Indicador visual de carga para mejorar UX
    private bool cargando = false;

    // URL base de la API - se complementa con la BaseAddress configurada en Program.cs
    private const string urlBaseApi = "api/producto";

    // =============================================================================
    // MÉTODOS DEL CICLO DE VIDA DEL COMPONENTE
    // =============================================================================

    /// <summary>
    /// Se ejecuta automáticamente cuando el componente se inicializa
    /// Es async porque necesita esperar la carga de datos de la API
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    // =============================================================================
    // OPERACIONES CRUDL (CREATE, READ, UPDATE, DELETE, LIST)
    // =============================================================================

    /// <summary>
    /// LISTAR: Obtiene todos los productos de la API
    /// HTTP GET /api/producto
    /// </summary>
    private async Task CargarProductos()
    {
        try
        {
            // Indica que está cargando para mostrar mensaje al usuario
            cargando = true;

            // Crea un cliente HTTP configurado (ver Program.cs)
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // GetFromJsonAsync: Hace GET y deserializa automáticamente el JSON
            // RespuestaApi<List<Producto>>: Tipo genérico que mapea la estructura de respuesta
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Producto>>>(urlBaseApi);

            // Operador null-coalescing (??) para manejar respuestas nulas
            listaProductos = respuesta?.Datos ?? new List<Producto>();

            // Mensaje de éxito
            mensaje = $"Se cargaron {listaProductos.Count} producto(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            // Manejo de errores con mensaje para el usuario
            mensaje = $"Error al listar productos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            // Finally garantiza que siempre se ejecute, incluso si hay error
            cargando = false;
        }
    }

    /// <summary>
    /// BUSCAR: Busca un producto específico por código
    /// HTTP GET /api/producto/codigo/{codigo}
    /// </summary>
    private async Task BuscarPorCodigo()
    {
        LimpiarMensajes();

        // Validación de entrada
        if (string.IsNullOrWhiteSpace(productoActual.Codigo))
        {
            mensaje = "Debe indicar el código para buscar.";
            claseAviso = "alert alert-warning";
            return; // Sale del método sin hacer la consulta
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // Construcción dinámica de la URL con el código
            var ruta = $"{urlBaseApi}/codigo/{productoActual.Codigo}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Producto>>>(ruta);

            // FirstOrDefault: Toma el primer elemento o null si no hay elementos
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                // ENCONTRADO: Carga los datos en el formulario
                productoActual = new Producto
                {
                    Codigo = encontrado.Codigo,
                    Nombre = encontrado.Nombre,
                    Stock = encontrado.Stock,
                    ValorUnitario = encontrado.ValorUnitario
                };
                existeProducto = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Producto cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                // NO ENCONTRADO: Resetea el estado a "crear"
                existeProducto = false;
                textoBotonGuardar = "Crear";
                mensaje = "Producto no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            // Error: Resetea a estado seguro
            existeProducto = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar producto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// LÓGICA INTELIGENTE: Decide si crear o actualizar según el estado
    /// Se ejecuta cuando se envía el formulario (OnValidSubmit)
    /// </summary>
    private async Task GuardarSegunEstado()
    {
        if (existeProducto)
            await ActualizarProducto();
        else
            await CrearProducto();
    }

    /// <summary>
    /// CREAR: Crea un nuevo producto
    /// HTTP POST /api/producto
    /// </summary>
    private async Task CrearProducto()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // PostAsJsonAsync: Serializa el objeto a JSON y hace POST
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, productoActual);

            // IsSuccessStatusCode: Verifica códigos HTTP 200-299
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Producto creado correctamente.";
                claseAviso = "alert alert-success";

                // Refresca la lista para mostrar el nuevo producto
                await CargarProductos();

                // Limpia el formulario para una nueva creación
                productoActual = new Producto();
                existeProducto = false;
                textoBotonGuardar = "Crear";
            }
            else
            {
                // Error HTTP: Lee el detalle del error
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear producto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// ACTUALIZAR: Actualiza un producto existente
    /// HTTP PUT /api/producto/codigo/{codigo}
    /// </summary>
    private async Task ActualizarProducto()
    {
        LimpiarMensajes();

        if (string.IsNullOrWhiteSpace(productoActual.Codigo))
        {
            mensaje = "Debe indicar el código para actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // PUT requiere el código en la URL y el objeto completo en el body
            var ruta = $"{urlBaseApi}/codigo/{productoActual.Codigo}";
            var respuesta = await cliente.PutAsJsonAsync(ruta, productoActual);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Producto actualizado correctamente.";
                claseAviso = "alert alert-success";

                // Refresca la lista para mostrar los cambios
                await CargarProductos();

                // Mantiene el producto en el formulario (no limpia)
                existeProducto = true;
                textoBotonGuardar = "Actualizar";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar producto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// ELIMINAR: Elimina un producto existente
    /// HTTP DELETE /api/producto/codigo/{codigo}
    /// </summary>
    private async Task EliminarProducto()
    {
        LimpiarMensajes();

        if (string.IsNullOrWhiteSpace(productoActual.Codigo))
        {
            mensaje = "Debe indicar el código para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // DELETE solo necesita el código en la URL
            var ruta = $"{urlBaseApi}/codigo/{productoActual.Codigo}";
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Producto eliminado correctamente.";
                claseAviso = "alert alert-success";

                // Refresca la lista (ya no aparecerá el producto eliminado)
                await CargarProductos();

                // Limpia completamente el formulario
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar producto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // =============================================================================
    // MÉTODOS AUXILIARES Y DE UTILIDAD
    // =============================================================================

    /// <summary>
    /// Prueba la conectividad con la API sin procesar datos
    /// Útil para diagnóstico de problemas de red
    /// </summary>
    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // Solo hace GET sin deserializar, para probar conectividad
            var respuesta = await cliente.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Carga un producto de la tabla en el formulario para edición
    /// Se ejecuta cuando el usuario hace clic en "Cargar" en la tabla
    /// </summary>
    /// <param name="p">El producto seleccionado de la tabla</param>
    private void CargarEnFormulario(Producto p)
    {
        // Crea una NUEVA instancia para evitar referencias compartidas
        // Si asignaras directamente (productoActual = p), cualquier cambio
        // en el formulario modificaría también el objeto en la lista
        productoActual = new Producto
        {
            Codigo = p.Codigo,
            Nombre = p.Nombre,
            Stock = p.Stock,
            ValorUnitario = p.ValorUnitario
        };

        // Cambia el estado a "producto existente"
        existeProducto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Producto seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Limpia solo los mensajes de estado, mantiene los datos
    /// </summary>
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Resetea completamente el formulario a estado inicial
    /// </summary>
    private void LimpiarFormulario()
    {
        productoActual = new Producto();
        existeProducto = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}
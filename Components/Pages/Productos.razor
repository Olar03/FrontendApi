@page "/productos"

@* 
    DIRECTIVAS DE BLAZOR:
    - @page: Define la ruta URL para acceder a este componente
    - @using: Importa namespaces para usar clases sin escribir el namespace completo
    - @inject: Inyecta servicios registrados en el contenedor de dependencias
    - @rendermode: CRÍTICO - Hace que el componente sea interactivo desde el inicio,
                   sin esto, los botones no funcionan debido al prerendering
*@

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.Linq
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Productos</PageTitle>


<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-basket3-fill me-2"></i>
            Gestión de productos
        </h5>
        @* ------------- BARRA DE ACCIONES GENERALES ------------- 
    Botones que no están relacionados con el formulario específico
        *@
        <div class="mb-3 d-flex gap-2">
            @* type="button" evita que estos botones hagan submit del formulario *@
            <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">
                <span class="oi oi-wifi" aria-hidden="true"></span> Probar conexión
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="CargarProductos">
                <span class="oi oi-reload" aria-hidden="true"></span> Mostrar todos
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <span class="oi oi-x" aria-hidden="true"></span> Limpiar
            </button>
        </div>

        @* ------------- MENSAJES DE ESTADO ------------- 
    Muestra mensajes de éxito, error o información al usuario
    Se usa renderizado condicional (@if) para mostrar solo cuando hay mensaje
        *@
        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            @* La clase CSS viene de la variable claseAviso que cambia según el tipo de mensaje *@
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        @* ------------- FORMULARIO CRUD ------------- 
    EditForm: Componente de Blazor para formularios con validación
    - Model: El objeto que se vincula al formulario
    - OnValidSubmit: Método que se ejecuta cuando el formulario es válido y se envía
    - FormName: CRÍTICO - Requerido en Blazor Server para identificar formularios únicos
*@
        <h4>Formulario de Producto</h4>

        <EditForm Model="productoActual" OnValidSubmit="GuardarSegunEstado" FormName="ProductoForm">
            @* Componentes de validación automática *@
            <DataAnnotationsValidator /> @* Habilita validación basada en atributos *@
            <ValidationSummary /> @* Muestra resumen de errores de validación *@

            @* Grid responsivo de Bootstrap para organizar los campos *@
            <div class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="productoActual.Id"
                        readonly="@(productoActual.Id > 0)" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Tipo Producto</label>
                    <InputSelect class="form-select" @bind-Value="productoActual.IdTipoProducto">
                        <option value="0">-- Seleccionar --</option>
                        @foreach (var tipo in listaTiposProducto)
                        {
                            <option value="@tipo.Id">@tipo.Nombre</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Código</label>
                    <InputText class="form-control" @bind-Value="productoActual.Codigo" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Título *</label>
                    <InputText class="form-control" @bind-Value="productoActual.Titulo" />
                </div>
            </div>

            <div class="row g-3 mt-2">
                <div class="col-md-12">
                    <label class="form-label">Descripción</label>
                    <InputTextArea class="form-control" rows="3" @bind-Value="productoActual.Descripcion" />
                </div>
            </div>

            <div class="row g-3 mt-2">
                <div class="col-md-3">
                    <label class="form-label">Fecha Inicio</label>
                    <InputDate class="form-control" @bind-Value="productoActual.FechaInicio" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Fin Prevista</label>
                    <InputDate class="form-control" @bind-Value="productoActual.FechaFinPrevista" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Modificación</label>
                    <InputDate class="form-control" @bind-Value="productoActual.FechaModificacion" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fecha Finalización</label>
                    <InputDate class="form-control" @bind-Value="productoActual.FechaFinalizacion" />
                </div>
            </div>

            <div class="row g-3 mt-2">
                <div class="col-md-12">
                    <label class="form-label">Ruta Logo</label>
                    <InputText class="form-control" @bind-Value="productoActual.RutaLogo"
                        placeholder="/images/logos/producto.png" />
                </div>
            </div>

            <div class="mt-3 d-flex flex-wrap gap-2">
                @* 
            type="submit": Este botón envía el formulario y ejecuta OnValidSubmit
            El texto cambia dinámicamente entre "Crear" y "Actualizar"
        *@
                <button type="submit" class="btn btn-primary">
                    <span class="oi oi-check" aria-hidden="true"></span> @textoBotonGuardar
                </button>

                @* 
            type="button": Botones que NO envían el formulario
            @onclick: Especifica el método C# que se ejecuta al hacer clic
            disabled: Atributo dinámico que habilita/deshabilita según condiciones
        *@
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">
                    <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarProducto"
                    disabled="@(!existeProducto)">
                    <span class="oi oi-pencil" aria-hidden="true"></span> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarProducto" disabled="@(!existeProducto)">
                    <span class="oi oi-trash" aria-hidden="true"></span> Eliminar
                </button>
            </div>
        </EditForm>

        <hr />

        @* ------------- LISTADO (READ/LIST) ------------- 
        Muestra los productos en una tabla con renderizado condicional
        *@

        @* Renderizado condicional: muestra diferentes contenidos según el estado *@
        @if (cargando)
        {
            <p><em>Cargando productos...</em></p>
        }
        else if (listaProductos.Count == 0)
        {
            <p>No hay productos disponibles.</p>
        }
        else
        {
            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>T. Producto</th>
                        <th>Código</th>
                        <th>Título</th>
                        <th>Fecha Inicio</th>
                        <th>Fecha Fin Prevista</th>
                        <th>Fecha Ult. Modificación</th>
                        <th>Fecha Finalización</th>
                        <th>Descripción</th>
                        <th>Ruta Logo</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @* 
                    @foreach: Itera sobre la lista y genera HTML para cada elemento
                    Cada producto (p) se renderiza como una fila
                    *@
                    @foreach (var p in listaProductos)
                    {
                        <tr>
                            <td>@p.Id</td>
                            <td>@(ObtenerNombreTipoProducto(p.IdTipoProducto))</td>
                            <td>@p.Codigo</td>
                            <td>@p.Titulo</td>
                            <td>@(p.FechaInicio?.ToString("dd/MM/yyyy") ?? "-")</td>
                            <td>@(p.FechaFinPrevista?.ToString("dd/MM/yyyy") ?? "-")</td>
                            <td>@(p.FechaModificacion?.ToString("dd/MM/yyyy") ?? "-")</td>
                            <td>@(p.FechaFinalizacion?.ToString("dd/MM/yyyy") ?? "-")</td>
                            <td>@p.Descripcion</td>
                            <td>@p.RutaLogo</td>
                            <td>
                                @* 
                            @(() => método(parámetro)): Lambda expression para pasar parámetros
                            Cada botón "sabe" qué producto cargar en el formulario
                        *@
                                <button type="button" class="btn btn-sm btn-outline-primary"
                                    @onclick="@(() => CargarEnFormulario(p))">
                                    <span class="bi bi-data-transfer-upload" aria-hidden="true"></span> Cargar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    // =============================================================================
    // VARIABLES DE ESTADO DEL COMPONENTE
    // =============================================================================

    // Lista que contiene todos los productos para mostrar en la tabla
    private List<Producto> listaProductos = new();

    // Lista de tipos de producto para el dropdown
    private List<TipoProducto> listaTiposProducto = new();

    // CRÍTICO: [SupplyParameterFromForm]
    // Este atributo le dice a Blazor que esta propiedad se llena desde el formulario
    // Sin esto, el formulario no funciona correctamente en Blazor Server
    [SupplyParameterFromForm]
    private Producto productoActual { get; set; } = new();

    // Bandera que indica si el producto en el formulario ya existe en la base de datos
    // Determina si el botón principal dice "Crear" o "Actualizar"
    private bool existeProducto = false;

    // Texto dinámico del botón principal
    private string textoBotonGuardar = "Crear";

    // Variables para mostrar mensajes al usuario
    private string mensaje = "";
    private string claseAviso = "alert alert-info"; // Clase CSS Bootstrap para el tipo de mensaje

    // Indicador visual de carga para mejorar UX
    private bool cargando = false;

    // URL base de la API - se complementa con la BaseAddress configurada en Program.cs
    private const string urlBaseApi = "api/producto";

    private const string urlBaseTipoProducto = "api/tipoProducto";

    // =============================================================================
    // MÉTODOS DEL CICLO DE VIDA DEL COMPONENTE
    // =============================================================================

    /// <summary>
    /// Se ejecuta automáticamente cuando el componente se inicializa
    /// Es async porque necesita esperar la carga de datos de la API
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await CargarTiposProducto();
        await CargarProductos();
        LimpiarMensajes();
    }

    // =============================================================================
    // OPERACIONES CRUDL (CREATE, READ, UPDATE, DELETE, LIST)
    // =============================================================================

    /// <summary>
    /// LISTAR: Obtiene todos los productos de la API
    /// HTTP GET /api/producto
    /// </summary>
    private async Task CargarProductos()
    {
        try
        {
            // Indica que está cargando para mostrar mensaje al usuario
            cargando = true;

            // Crea un cliente HTTP configurado (ver Program.cs)
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // GetFromJsonAsync: Hace GET y deserializa automáticamente el JSON
            // RespuestaApi<List<Producto>>: Tipo genérico que mapea la estructura de respuesta
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Producto>>>(urlBaseApi);

            // Operador null-coalescing (??) para manejar respuestas nulas
            listaProductos = respuesta?.Datos ?? new List<Producto>();

            // Mensaje de éxito
            mensaje = $"Se cargaron {listaProductos.Count} producto(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            // Manejo de errores con mensaje para el usuario
            mensaje = $"Error al listar productos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            // Finally garantiza que siempre se ejecute, incluso si hay error
            cargando = false;
        }
    }

    /// <summary>
    /// BUSCAR: Busca un producto específico por ID
    /// HTTP GET /api/producto/id/{id}
    /// </summary>
    private async Task BuscarPorId()
    {
        LimpiarMensajes();

        // Validación de entrada
        if (productoActual.Id <= 0)
        {
            mensaje = "Debe indicar el ID para buscar.";
            claseAviso = "alert alert-warning";
            return; // Sale del método sin hacer la consulta
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            // Construcción dinámica de la URL con el ID
            var ruta = $"{urlBaseApi}/id/{productoActual.Id}";
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Producto>>>(ruta);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado != null)
            {
                // ENCONTRADO: Carga los datos en el formulario
                productoActual = new Producto()
                {
                    Id = encontrado.Id,
                    IdTipoProducto = encontrado.IdTipoProducto,
                    Codigo = encontrado.Codigo,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion,
                    FechaInicio = encontrado.FechaInicio,
                    FechaFinPrevista = encontrado.FechaFinPrevista,
                    FechaModificacion = encontrado.FechaModificacion,
                    FechaFinalizacion = encontrado.FechaFinalizacion,
                    RutaLogo = encontrado.RutaLogo
                };
                existeProducto = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Producto cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                // NO ENCONTRADO: Resetea el estado a "crear"
                existeProducto = false;
                textoBotonGuardar = "Crear";
                mensaje = "Producto no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            // Error: Resetea a estado seguro
            existeProducto = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar producto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// LÓGICA INTELIGENTE: Decide si crear o actualizar según el estado
    /// Se ejecuta cuando se envía el formulario (OnValidSubmit)
    /// </summary>
    private async Task GuardarSegunEstado()
    {
        if (existeProducto)
            await ActualizarProducto();
        else
            await CrearProducto();
    }

    /// <summary>
    /// CREAR: Crea un nuevo producto
    /// HTTP POST /api/producto
    /// </summary>
    private async Task CrearProducto()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // PostAsJsonAsync: Serializa el objeto a JSON y hace POST
            var productoaCrear = new
            {
                IdTipoProducto = productoActual.IdTipoProducto,
                Codigo = productoActual.Codigo,
                Titulo = productoActual.Titulo,
                Descripcion = productoActual.Descripcion,
                FechaInicio = productoActual.FechaInicio,
                FechaFinPrevista = productoActual.FechaFinPrevista,
                FechaModificacion = productoActual.FechaModificacion,
                FechaFinalizacion = productoActual.FechaFinalizacion,
                RutaLogo = productoActual.RutaLogo
            };
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, productoaCrear);

            if (respuesta.IsSuccessStatusCode)
            {
                var productoCreado = await respuesta.Content.ReadFromJsonAsync<RespuestaApi<Producto>>();
                if (productoCreado != null)
                {
                    mensaje = "Producto creado correctamente.";
                    claseAviso = "alert alert-success";

                    // Refresca la lista para mostrar el nuevo producto
                    await CargarProductos();

                    // Limpia el formulario para un nuevo ingreso
                    LimpiarFormulario();
                }

            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear producto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// ACTUALIZAR: Actualiza un producto existente
    /// HTTP PUT /api/producto/{id}
    /// </summary>
    private async Task ActualizarProducto()
    {
        LimpiarMensajes();

        if (productoActual.Id <= 0)
        {
            mensaje = "Debe indicar el ID para actualizar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApi}/id/{productoActual.Id}";

            // PostAsJsonAsync: Serializa el objeto a JSON y hace POST
            var productoaActualizar = new
            {
                IdTipoProducto = productoActual.IdTipoProducto,
                Codigo = productoActual.Codigo,
                Titulo = productoActual.Titulo,
                Descripcion = productoActual.Descripcion,
                FechaInicio = productoActual.FechaInicio,
                FechaFinPrevista = productoActual.FechaFinPrevista,
                FechaModificacion = productoActual.FechaModificacion,
                FechaFinalizacion = productoActual.FechaFinalizacion,
                RutaLogo = productoActual.RutaLogo
            };
            var respuesta = await cliente.PostAsJsonAsync(url, productoaActualizar);

            if (respuesta.IsSuccessStatusCode)
            {

                mensaje = "Producto actaulizado correctamente.";
                claseAviso = "alert alert-success";

                // Refresca la lista para mostrar el nuevo producto
                await CargarProductos();

                // Limpia el formulario para un nuevo ingreso
                LimpiarFormulario();


            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actaulizar el producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actaulizar productos: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// ELIMINAR: Elimina un producto existente
    /// HTTP DELETE /api/producto/id/{id}
    /// </summary>
    private async Task EliminarProducto()
    {
        LimpiarMensajes();

        if (productoActual.Id <= 0)
        {
            mensaje = "Debe indicar el ID para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // DELETE solo necesita el ID en la URL
            var ruta = $"{urlBaseApi}/id/{productoActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Producto eliminado correctamente.";
                claseAviso = "alert alert-success";

                // Refresca la lista (ya no aparecerá el producto eliminado)
                await CargarProductos();

                // Limpia completamente el formulario
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el producto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar producto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // =============================================================================
    // MÉTODOS AUXILIARES Y DE UTILIDAD
    // =============================================================================

    /// <summary>
    /// Prueba la conectividad con la API sin procesar datos
    /// Útil para diagnóstico de problemas de red
    /// </summary>
    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");

            // Solo hace GET sin deserializar, para probar conectividad
            var respuesta = await cliente.GetAsync(urlBaseApi);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Carga los tipos de producto para el dropdown
    /// HTTP GET /api/tipoProducto
    /// </summary>
    private async Task CargarTiposProducto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<TipoProducto>>>(urlBaseTipoProducto);
            listaTiposProducto = respuesta?.Datos ?? new List<TipoProducto>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar tipos de producto: {error.Message}";
            claseAviso = "alert alert-warning";
        }
    }

    /// <summary>
    /// Obtiene el nombre del tipo de producto por ID
    /// </summary>
    private string ObtenerNombreTipoProducto(int idTipo)
    {
        var tipo = listaTiposProducto.FirstOrDefault(t => t.Id == idTipo);
        return tipo?.Nombre ?? tipo?.Id.ToString() ?? "Sin tipo";
    }

    /// <summary>
    /// Carga un producto de la tabla en el formulario para edición
    /// Se ejecuta cuando el usuario hace clic en "Cargar" en la tabla
    /// </summary>
    /// <param name="p">El producto seleccionado de la tabla</param>
    private void CargarEnFormulario(Producto p)
    {
        // Crea una NUEVA instancia para evitar referencias compartidas
        // Si asignaras directamente (productoActual = p), cualquier cambio
        // en el formulario modificaría también el objeto en la lista
        productoActual = new Producto
        {
            Id = p.Id,
            IdTipoProducto = p.IdTipoProducto,
            Codigo = p.Codigo,
            Titulo = p.Titulo,
            Descripcion = p.Descripcion,
            FechaInicio = p.FechaInicio,
            FechaFinPrevista = p.FechaFinPrevista,
            FechaModificacion = p.FechaModificacion,
            FechaFinalizacion = p.FechaFinalizacion,
            RutaLogo = p.RutaLogo
        };

        // Cambia el estado a "producto existente"
        existeProducto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Producto seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Limpia solo los mensajes de estado, mantiene los datos
    /// </summary>
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Resetea completamente el formulario a estado inicial
    /// </summary>
    private void LimpiarFormulario()
    {
        productoActual = new Producto();
        existeProducto = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}
@*  
- @page "/responsables"
- Autor: Victor Oliveros
- Fecha: 10/2025
- Version: 1.0
- Descripción: Página para gestionar responsables, vinculados a tipos de responsables y usuarios.
- Notas: Basada en la estructura de Archivos.razor

Documentación: Permite gestionar responsables que combinan usuarios con tipos de responsabilidad.
*@

@page "/responsables"

@using System.Net.Http.Json
@using FrontendBlazorApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq

@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Gestión de Responsables</PageTitle>

<div class="container items-center">
    <div class="welcome-card">
        <h5 class="display-4 text-primary mb-4">
            <i class="bi bi-person-badge me-2"></i>
            Gestión de Responsables
        </h5>

        <div class="mb-3 d-flex gap-2 items-center">
            <button type="button" class="btn btn-outline-primary" @onclick="CargarResponsables">
                <i class="bi bi-eye" aria-hidden="true"></i> Mostrar todos
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="CargarDatosIniciales">
                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i> Cargar Datos
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">
                <i class="bi bi-eraser" aria-hidden="true"></i> Limpiar
            </button>
        </div>

        @if (!string.IsNullOrWhiteSpace(mensaje))
        {
            <div class="@claseAviso" role="alert">@mensaje</div>
        }

        <h4>Formulario de Responsable</h4>
        <EditForm Model="@responsableActual" OnValidSubmit="GuardarSegunEstado" FormName="ResponsableForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">ID</label>
                    <InputNumber class="form-control" @bind-Value="responsableActual.Id" />
                    <div class="form-text">Solo para búsqueda</div>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Tipo de Responsable</label>
                    <InputSelect class="form-control" @bind-Value="responsableActual.IdTipoResponsable">
                        <option value="0">-- Seleccione un tipo --</option>
                        @foreach (var tipo in listaTiposResponsable)
                        {
                            <option value="@tipo.Id">@tipo.Titulo</option>
                        }
                    </InputSelect>
                    <div class="form-text">Seleccione el tipo de responsabilidad</div>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Usuario</label>
                    <InputSelect class="form-control" @bind-Value="responsableActual.IdUsuario">
                        <option value="0">-- Seleccione un usuario --</option>
                        @foreach (var usuario in listaUsuarios)
                        {
                            <option value="@usuario.Id">@usuario.Email</option>
                        }
                    </InputSelect>
                    <div class="form-text">Seleccione el usuario asociado</div>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Nombre del Responsable</label>
                    <InputText class="form-control" @bind-Value="responsableActual.Nombre" />
                    <div class="form-text">Nombre descriptivo del responsable</div>
                </div>
            </div>

            <div class="mt-3 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-plus-circle" aria-hidden="true"></i> @textoBotonGuardar
                </button>
                <button type="button" class="btn btn-secondary" @onclick="BuscarPorID">
                    <i class="bi bi-search" aria-hidden="true"></i> Buscar
                </button>
                <button type="button" class="btn btn-warning" @onclick="ActualizarResponsable"
                    disabled="@(!existeResponsable)">
                    <i class="bi bi-pencil-square" aria-hidden="true"></i> Actualizar
                </button>
                <button type="button" class="btn btn-danger" @onclick="EliminarResponsable"
                    disabled="@(!existeResponsable)">
                    <i class="bi bi-trash" aria-hidden="true"></i> Eliminar
                </button>
            </div>
        </EditForm>
        <hr />

        @if (cargando)
        {
            <p>Cargando responsables...</p>
        }
        else if (listaResponsables.Count == 0)
        {
            <p>No hay responsables disponibles.</p>
        }
        else
        {
            <h4 class="mt-4">Lista de Responsables</h4>
            <table class="table table-striped table-blue">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Tipo</th>
                        <th>Usuario</th>
                        <th>Nombre</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var responsable in listaResponsables)
                    {
                        <tr>
                            <td>@responsable.Id</td>
                            <td>
                                @{
                                    var tipoRelacionado = listaTiposResponsable
                                    .FirstOrDefault(t => t.Id == responsable.IdTipoResponsable);
                                }
                                @(tipoRelacionado?.Titulo ?? $"Tipo ID: {responsable.IdTipoResponsable}")
                            </td>
                            <td>
                                @{
                                    var usuarioRelacionado = listaUsuarios
                                    .FirstOrDefault(u => u.Id == responsable.IdUsuario);
                                }
                                @(usuarioRelacionado?.Email ?? $"Usuario ID: {responsable.IdUsuario}")
                            </td>
                            <td>@responsable.Nombre</td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => CargarEnFormulario(responsable)">
                                    <i class="bi bi-pencil" aria-hidden="true"></i> Editar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<Responsable> listaResponsables = new();
    private List<TipoResponsable> listaTiposResponsable = new();
    private List<Usuario> listaUsuarios = new();

    [SupplyParameterFromForm]
    private Responsable responsableActual { get; set; } = new();

    private bool existeResponsable = false;
    private bool cargando = false;
    private string mensaje = "";
    private string claseAviso = "alert alert-info";
    private string textoBotonGuardar = "Crear Responsable";

    private const string urlBaseApiResponsables = "api/responsable";
    private const string urlBaseApiTiposResponsable = "api/tiporesponsable";
    private const string urlBaseApiUsuarios = "api/usuario";

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales(); //
        await CargarResponsables();
         LimpiarMensajes();
    }

    private async Task CargarDatosIniciales() //
    {
        await CargarTiposResponsable();
        await CargarUsuarios();
        LimpiarMensajes();
    }

    private async Task CargarResponsables()
    {
        LimpiarMensajes();
        try
        {
            cargando = true;
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Responsable>>>(urlBaseApiResponsables);

            listaResponsables = respuesta?.Datos ?? new List<Responsable>();
            mensaje = $"Se cargaron {listaResponsables.Count} responsables.";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar responsables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarTiposResponsable()
    {
         LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<TipoResponsable>>>(urlBaseApiTiposResponsable);
            listaTiposResponsable = respuesta?.Datos ?? new List<TipoResponsable>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar tipos de responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task CargarUsuarios()
    {
         LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Usuario>>>(urlBaseApiUsuarios);
            listaUsuarios = respuesta?.Datos ?? new List<Usuario>();
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar usuarios: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task BuscarPorID()
    {
        LimpiarMensajes();
        if (responsableActual.Id <= 0)
        {
            mensaje = "Por favor ingrese un ID válido para buscar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiResponsables}/id/{responsableActual.Id}";
            var respuesta = await httpClient.GetFromJsonAsync<RespuestaApi<List<Responsable>>>(url);
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado != null)
            {
                responsableActual = new Responsable()
                {
                    Id = encontrado.Id,
                    IdTipoResponsable = encontrado.IdTipoResponsable,
                    IdUsuario = encontrado.IdUsuario,
                    Nombre = encontrado.Nombre
                };

                existeResponsable = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Responsable encontrado y cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = "Responsable no encontrado.";
                claseAviso = "alert alert-warning";
                existeResponsable = false;
                textoBotonGuardar = "Crear";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al buscar responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task GuardarSegunEstado()
    {
        LimpiarMensajes();

        if (responsableActual.IdTipoResponsable <= 0)
        {
            mensaje = "Debe seleccionar un tipo de responsable.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (responsableActual.IdUsuario <= 0)
        {
            mensaje = "Debe seleccionar un usuario.";
            claseAviso = "alert alert-warning";
            return;
        }

        if (existeResponsable)
        {
            await ActualizarResponsable();
        }
        else
        {
            await CrearResponsable();
        }
    }

    private async Task CrearResponsable()
    {
         LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            var responsableParaCrear = new
            {
                IdTipoResponsable = responsableActual.IdTipoResponsable,
                IdUsuario = responsableActual.IdUsuario,
                Nombre = responsableActual.Nombre
            };

            var respuesta = await httpClient.PostAsJsonAsync(urlBaseApiResponsables, responsableParaCrear);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable creado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al crear responsable: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task ActualizarResponsable()
    {
         LimpiarMensajes();
        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");

            var responsableParaActualizar = new
            {
                IdTipoResponsable = responsableActual.IdTipoResponsable,
                IdUsuario = responsableActual.IdUsuario,
                Nombre = responsableActual.Nombre
            };

            var respuesta = await httpClient.PutAsJsonAsync($"{urlBaseApiResponsables}/{responsableActual.Id}",
            responsableParaActualizar);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al actualizar responsable: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private async Task EliminarResponsable()
    {
         LimpiarMensajes();
        if (responsableActual.Id <= 0)
        {
            mensaje = "ID de responsable inválido para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            using var httpClient = fabricaHttp.CreateClient("ApiProyecto");
            var url = $"{urlBaseApiResponsables}/id/{responsableActual.Id}";
            var respuesta = await httpClient.DeleteAsync(url);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Responsable eliminado correctamente.";
                claseAviso = "alert alert-success";
                await CargarResponsables();
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"Error al eliminar responsable: {respuesta.ReasonPhrase}. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar responsable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    private void CargarEnFormulario(Responsable responsable)
    {
         LimpiarMensajes();
        responsableActual = new Responsable
        {
            Id = responsable.Id,
            IdTipoResponsable = responsable.IdTipoResponsable,
            IdUsuario = responsable.IdUsuario,
            Nombre = responsable.Nombre
        };

        existeResponsable = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Responsable cargado en formulario.";
        claseAviso = "alert alert-info";
    }

    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "";
    }

    private void LimpiarFormulario()
    {
        responsableActual = new Responsable();
        existeResponsable = false;
        textoBotonGuardar = "Crear Responsable";
        LimpiarMensajes();
    }
}

